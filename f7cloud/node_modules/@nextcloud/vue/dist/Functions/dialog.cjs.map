{"version":3,"file":"dialog.cjs","sources":["../../src/functions/dialog/index.ts"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { AsyncComponent, Component } from 'vue'\n\nimport Vue, { toRaw } from 'vue'\n\ntype SpawnDialogOptions = {\n\t/**\n\t * Container to mount the dialog to\n\t * @default document.body\n\t */\n\tcontainer?: Element | string\n}\n\nexport function spawnDialog(\n\tdialog: Component,\n\tprops?: object,\n\tonClose?: (...rest: unknown[]) => void,\n): void\n\nexport function spawnDialog(\n\tdialog: Component,\n\tprops?: object,\n\toptions?: SpawnDialogOptions,\n\tonClose?: (...rest: unknown[]) => void,\n): void\n\n/**\n * Spawn a single-use Vue dialog instance to get the result when it is closed\n *\n * @param dialog - Dialog component to spawn\n * @param props - Props to pass to the dialog instance\n * @param optionsOrOnClose - Spawning options or a callback when the dialog is closed\n * @param onClose - Callback when the dialog is closed\n */\nexport function spawnDialog(\n\tdialog: Component,\n\tprops: object = {},\n\toptionsOrOnClose: SpawnDialogOptions | ((...rest: unknown[]) => void) = {},\n\tonClose: (...rest: unknown[]) => void = () => {},\n): Vue {\n\tif (typeof optionsOrOnClose === 'function') {\n\t\tonClose = optionsOrOnClose\n\t\toptionsOrOnClose = {}\n\t}\n\n\tlet { container } = optionsOrOnClose\n\n\t// For backwards compatibility try to use container from props\n\tif ('container' in props && typeof props.container === 'string') {\n\t\tcontainer ??= props.container\n\t}\n\n\t// Resolve container to an Element or fallback to document.body\n\tconst resolvedContainer = (typeof container === 'string' && document.querySelector(container)) || document.body\n\n\t// Create root container element for the dialog\n\tconst element = resolvedContainer.appendChild(document.createElement('div'))\n\n\tconst vm = new Vue({\n\t\tel: element,\n\t\tname: 'VueDialogHelper',\n\t\trender: (h) =>\n\t\t\th(dialog, {\n\t\t\t\tprops: {\n\t\t\t\t\t// If dialog has no `container` prop passing a falsy value does nothing\n\t\t\t\t\t// Otherwise it is expected that `null` disables teleport and mounts dialog in place like NcDialog/NcModal\n\t\t\t\t\tcontainer: null,\n\t\t\t\t\t...props,\n\t\t\t\t},\n\t\t\t\ton: {\n\t\t\t\t\tclose: (...rest: unknown[]) => {\n\t\t\t\t\t\tonClose(...rest.map(v => toRaw(v)))\n\t\t\t\t\t\tvm.$destroy()\n\t\t\t\t\t\telement.remove()\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t})\n\treturn vm\n}\n"],"names":["Vue","toRaw"],"mappings":";;;;;AAqCgB,SAAA,YACf,QACA,QAAgB,CAAA,GAChB,mBAAwE,CAAA,GACxE,UAAwC,MAAM;AAAC,GACzC;AACF,MAAA,OAAO,qBAAqB,YAAY;AACjC,cAAA;AACV,uBAAmB,CAAC;AAAA,EAAA;AAGjB,MAAA,EAAE,cAAc;AAGpB,MAAI,eAAe,SAAS,OAAO,MAAM,cAAc,UAAU;AAChE,kBAAc,MAAM;AAAA,EAAA;AAIf,QAAA,oBAAqB,OAAO,cAAc,YAAY,SAAS,cAAc,SAAS,KAAM,SAAS;AAG3G,QAAM,UAAU,kBAAkB,YAAY,SAAS,cAAc,KAAK,CAAC;AAErE,QAAA,KAAK,IAAIA,qBAAI;AAAA,IAClB,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,QAAQ,CAAC,MACR,EAAE,QAAQ;AAAA,MACT,OAAO;AAAA;AAAA;AAAA,QAGN,WAAW;AAAA,QACX,GAAG;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,QACH,OAAO,IAAI,SAAoB;AAC9B,kBAAQ,GAAG,KAAK,IAAI,OAAKC,IAAM,MAAA,CAAC,CAAC,CAAC;AAClC,aAAG,SAAS;AACZ,kBAAQ,OAAO;AAAA,QAAA;AAAA,MAChB;AAAA,IAED,CAAA;AAAA,EAAA,CACF;AACM,SAAA;AACR;;"}