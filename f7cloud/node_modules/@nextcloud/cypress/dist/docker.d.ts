/**
 * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
import type { Container } from 'dockerode';
import Docker from 'dockerode';
export declare const docker: Docker;
/**
 * Get the container name that is currently created and/or used by dockerode
 */
export declare const getContainerName: () => string;
/**
 * Get the current container used
 * Throws if not found
 */
export declare const getContainer: () => Container;
interface StartOptions {
    /**
     * Force recreate the container even if an old one is found
     * @default false
     */
    forceRecreate?: boolean;
    /**
     * Additional mounts to create on the container
     * You can pass a mapping from server path (relative to Nextcloud root) to your local file system
     * @example ```js
     * { config: '/path/to/local/config' }
     * ```
     */
    mounts?: Record<string, string>;
    /**
     * Optional port binding
     * The default port (TCP 80) will be exposed to this host port
     */
    exposePort?: number;
}
/**
 * Start the testing container
 *
 * @param {string|undefined} branch server branch to use (default 'master')
 * @param {boolean|string|undefined} mountApp bind mount app within server (`true` for autodetect, `false` to disable, or a string to force a path) (default true)
 * @param {StartOptions|undefined} options Optional parameters to configure the container creation
 * @return Promise resolving to the IP address of the server
 * @throws {Error} If Nextcloud container could not be started
 */
export declare function startNextcloud(branch?: string, mountApp?: boolean | string, options?: StartOptions): Promise<string>;
/**
 * Configure Nextcloud
 *
 * @param {string[]} apps List of default apps to install (default is ['viewer'])
 * @param {string|undefined} vendoredBranch The branch used for vendored apps, should match server (defaults to latest branch used for `startNextcloud` or fallsback to `master`)
 * @param {Container|undefined} container Optional server container to use (defaults to current container)
 */
export declare const configureNextcloud: (apps?: string[], vendoredBranch?: string, container?: Container) => Promise<void>;
/**
 * Setup test users
 *
 * @param {Container|undefined} container Optional server container to use (defaults to current container)
 */
export declare const setupUsers: (container?: Container) => Promise<void>;
/**
 * Create a snapshot of the current database
 * @param {string|undefined} snapshot Name of the snapshot (default is a timestamp)
 * @param {Container|undefined} container Optional server container to use (defaults to current container)
 * @return Promise resolving to the snapshot name
 */
export declare const createSnapshot: (snapshot?: string, container?: Container) => Promise<string>;
/**
 * Restore a snapshot of the database
 * @param {string|undefined} snapshot Name of the snapshot (default is 'init')
 * @param {Container|undefined} container Optional server container to use (defaults to current container)
 */
export declare const restoreSnapshot: (snapshot?: string, container?: Container) => Promise<void>;
/**
 * Force stop the testing container
 */
export declare const stopNextcloud: () => Promise<void>;
/**
 * Get the testing container's IP
 *
 * @param container name of the container
 */
export declare const getContainerIP: (container?: Container) => Promise<string>;
export declare const waitOnNextcloud: (ip: string) => Promise<void>;
interface RunExecOptions {
    container: Docker.Container;
    user: string;
    env: string[];
    verbose: boolean;
}
/**
 * Execute a command in the container
 */
export declare const runExec: (command: string | string[], { container, user, verbose, env }?: Partial<RunExecOptions>) => Promise<string>;
/**
 * Execute an occ command in the container
 */
export declare const runOcc: (command: string | string[], { container, env, verbose }?: Partial<Omit<RunExecOptions, "user">>) => Promise<string>;
/**
 * Set a Nextcloud system config in the container.
 */
export declare const setSystemConfig: (key: string, value: string, { container }?: {
    container?: Docker.Container;
}) => Promise<string>;
/**
 * Get a Nextcloud system config value from the container.
 */
export declare const getSystemConfig: (key: string, { container }?: {
    container?: Docker.Container;
}) => Promise<string>;
/**
 * Add a user to the Nextcloud in the container.
 */
export declare const addUser: (user: string, { container, env, verbose }?: Partial<Omit<RunExecOptions, "user">>) => Promise<string>;
export {};
