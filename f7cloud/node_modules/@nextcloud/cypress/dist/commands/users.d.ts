/**
 * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
export declare class User {
    userId: string;
    password: string;
    language: string;
    constructor(user: string, password?: string, language?: string);
}
export declare const randHash: () => string;
/**
 * Create a random user
 */
export declare const createRandomUser: () => Cypress.Chainable<User>;
/**
 * Create a user
 *
 * **Warning**: Using this function will reset the previous session
 */
export declare const createUser: (user: User) => Cypress.Chainable<Cypress.Response<any>>;
/**
 * Query list of users on the Nextcloud instance
 *
 * **Warning**: Using this function will reset the previous session
 * @returns list of user IDs
 */
export declare function listUsers<b extends boolean>(details?: b): Cypress.Chainable<b extends true ? Record<string, string>[] : string[]>;
/**
 * Delete an user on the Nextcloud instance
 *
 * **Warning**: Using this function will reset the previous session
 * @param user User to delete
 */
export declare const deleteUser: (user: User) => Cypress.Chainable<Cypress.Response<any>>;
/**
 * Modify an attribute of a given user on the Nextcloud instance
 *
 * @param user User who performs the modification
 * @param key Attribute name
 * @param value New attribute value
 */
export declare const modifyUser: (user: User, key: string, value: any) => Cypress.Chainable<Cypress.Response<any>>;
/**
 * Query metadata for and in behalf of a given user
 *
 * @param user User to change
 */
export declare const getUserData: (user: User) => Cypress.Chainable<Cypress.Response<any>>;
/**
 * Enable or disable a user
 *
 * @param {User} user the user to dis- / enable
 * @param {boolean} enable True if the user should be enable, false to disable
 */
export declare const enableUser: (user: User, enable?: boolean) => Cypress.Chainable<Cypress.Response<any>>;
