{"version":3,"file":"index.mjs","sources":["../src/utils/l10n.ts","../src/components/PasswordDialog.vue","../src/globals.ts","../src/main.ts"],"sourcesContent":["/*!\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: MIT\n */\n\nimport { getGettextBuilder } from '@nextcloud/l10n/gettext'\n\nconst gtBuilder = getGettextBuilder()\n\t.detectLocale()\n\n__TRANSLATIONS__\n\t.map(({ locale, translations }) => gtBuilder.addTranslation(locale, {\n\t\ttranslations: {\n\t\t\t'': Object.fromEntries(translations.map((t) => [t.msgid, t])),\n\t\t},\n\t}))\n\nconst gt = gtBuilder.build()\n\nexport const n = gt.ngettext.bind(gt)\nexport const t = gt.gettext.bind(gt)\n","<!--\n - SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: MIT\n -->\n\n<template>\n\t<NcDialog :name=\"t('Confirm your password')\"\n\t\t:container=\"null\"\n\t\tcontent-classes=\"vue-password-confirmation\"\n\t\t@update:open=\"close\">\n\t\t<!-- Dialog content -->\n\t\t<p>{{ t('This action needs authentication') }}</p>\n\t\t<form class=\"vue-password-confirmation__form\" @submit.prevent=\"confirm\">\n\t\t\t<NcPasswordField ref=\"field\"\n\t\t\t\t:value.sync=\"password\"\n\t\t\t\t:label=\"t('Password')\"\n\t\t\t\t:helper-text=\"helperText\"\n\t\t\t\t:error=\"showError\"\n\t\t\t\trequired />\n\t\t\t<NcButton class=\"vue-password-confirmation__submit\"\n\t\t\t\ttype=\"primary\"\n\t\t\t\tnative-type=\"submit\"\n\t\t\t\t:disabled=\"!password || loading\">\n\t\t\t\t<template v-if=\"loading\" #icon>\n\t\t\t\t\t<NcLoadingIcon :size=\"20\" />\n\t\t\t\t</template>\n\t\t\t\t{{ t('Confirm') }}\n\t\t\t</NcButton>\n\t\t</form>\n\t</NcDialog>\n</template>\n\n<script lang=\"ts\">\nimport NcButton from '@nextcloud/vue/dist/Components/NcButton.js'\nimport NcDialog from '@nextcloud/vue/dist/Components/NcDialog.js'\nimport NcLoadingIcon from '@nextcloud/vue/dist/Components/NcLoadingIcon.js'\nimport NcPasswordField from '@nextcloud/vue/dist/Components/NcPasswordField.js'\nimport { defineComponent } from 'vue'\nimport { t } from '../utils/l10n.js'\n\nimport type { ComponentInstance } from 'vue'\n\ntype ICanFocus = ComponentInstance & {\n\tfocus: () => void\n\tselect: () => void\n}\n\nexport default defineComponent({\n\tname: 'PasswordDialog',\n\n\tcomponents: {\n\t\tNcButton,\n\t\tNcDialog,\n\t\tNcLoadingIcon,\n\t\tNcPasswordField,\n\t},\n\n\tprops: {\n\t\tvalidate: {\n\t\t\ttype: Function,\n\t\t\tdefault: () => {},\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tpassword: '',\n\t\t\tloading: false,\n\t\t\tshowError: false,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\thelperText() {\n\t\t\tif (this.showError) {\n\t\t\t\treturn this.password === '' ? t('Please enter your password') : t('Wrong password')\n\t\t\t}\n\t\t\tif (this.loading) {\n\t\t\t\treturn t('Checking password â€¦') // TRANSLATORS: This is a status message, shown when the system is checking the users password\n\t\t\t}\n\t\t\treturn ''\n\t\t},\n\t},\n\n\tmounted() {\n\t\tthis.focusPasswordField()\n\t},\n\n\tmethods: {\n\t\tt,\n\n\t\tasync confirm(): Promise<void> {\n\t\t\tthis.showError = false\n\t\t\tthis.loading = true\n\n\t\t\tif (this.password === '') {\n\t\t\t\tthis.showError = true\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait this.validate(this.password)\n\t\t\t\tthis.$emit('confirmed')\n\t\t\t} catch (e) {\n\t\t\t\tthis.showError = true\n\t\t\t\tthis.selectPasswordField()\n\t\t\t} finally {\n\t\t\t\tthis.loading = false\n\t\t\t}\n\t\t},\n\n\t\tclose(open: boolean): void {\n\t\t\tif (!open) {\n\t\t\t\tthis.$emit('close')\n\t\t\t}\n\t\t},\n\n\t\tfocusPasswordField() {\n\t\t\tthis.$nextTick(() => {\n\t\t\t\t(this.$refs.field as ICanFocus).focus()\n\t\t\t})\n\t\t},\n\n\t\tselectPasswordField() {\n\t\t\tthis.$nextTick(() => {\n\t\t\t\t(this.$refs.field as ICanFocus).select()\n\t\t\t})\n\t\t},\n\t},\n})\n</script>\n\n<style lang=\"scss\">\n.vue-password-confirmation {\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin-inline: 6px;\n\tmargin-block-end: 6px;\n\tgap: 10px 0;\n\n\t&__form {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 8px 0;\n\t\t// allow focus visible outlines\n\t\tpadding: 2px;\n\t}\n\n\t&__submit {\n\t\talign-self: end;\n\t}\n}\n</style>\n","/*!\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: MIT\n */\n\nexport enum PwdConfirmationMode {\n\tLax = 'lax',\n\tStrict = 'strict',\n}\n\ndeclare module '@nextcloud/axios' {\n\texport interface AxiosRequestConfig {\n\t\t/** To use this property you need to use the addPasswordConfirmationInterceptors function. */\n\t\tconfirmPassword?: PwdConfirmationMode;\n\t}\n}\n\ndeclare global {\n\tinterface Window {\n\t\t_nc_password_confirmation_dialog?: Vue\n\t}\n}\n","/*!\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: MIT\n */\nimport Vue from 'vue'\n\nimport type { AxiosInstance } from '@nextcloud/axios'\nimport axios from '@nextcloud/axios'\nimport { getCurrentUser } from '@nextcloud/auth'\nimport { generateUrl } from '@nextcloud/router'\nimport { spawnDialog } from '@nextcloud/dialogs'\n\nimport PasswordDialogVue from './components/PasswordDialog.vue'\nimport { PwdConfirmationMode } from './globals'\nexport { PwdConfirmationMode } from './globals'\n\nconst PAGE_LOAD_TIME = Date.now()\nlet INTERCEPTOR_INITIALIZED = false\n\n/**\n * Check if password confirmation is required according to the last confirmation time.\n * Use as a replacement of deprecated `OC.PasswordConfirmation.requiresPasswordConfirmation()`.\n * Not needed if `confirmPassword()` can be used, because it checks requirements itself.\n *\n * @param mode\n * @return {boolean} Whether password confirmation is required or was confirmed recently\n */\nexport const isPasswordConfirmationRequired = (mode: PwdConfirmationMode): boolean => {\n\tif (!window.backendAllowsPasswordConfirmation) {\n\t\treturn false\n\t}\n\n\tif (mode === PwdConfirmationMode.Strict) {\n\t\treturn true\n\t}\n\n\tconst serverTimeDiff = PAGE_LOAD_TIME - (window.nc_pageLoad * 1000)\n\tconst timeSinceLogin = Date.now() - (serverTimeDiff + (window.nc_lastLogin * 1000))\n\n\t// If timeSinceLogin > 30 minutes\n\treturn timeSinceLogin > 30 * 60 * 1000\n}\n\n/**\n * Confirm password if needed.\n * Replacement of deprecated `OC.PasswordConfirmation.requirePasswordConfirmation(callback)`\n *\n * @return {Promise<void>} Promise that resolves when password is confirmed or not needed.\n *                         Rejects if password confirmation was cancelled\n *                         or confirmation is already in process.\n */\nexport const confirmPassword = (): Promise<void> => {\n\tif (!isPasswordConfirmationRequired(PwdConfirmationMode.Lax)) {\n\t\treturn Promise.resolve()\n\t}\n\n\treturn new Promise((resolve, reject) => {\n\t\tpromptPassword(\n\t\t\tasync (password: string) => {\n\t\t\t\tawait _confirmPassword(password)\n\t\t\t\tresolve()\n\t\t\t},\n\t\t\t() => reject(new Error('Dialog closed')),\n\t\t)\n\t})\n}\n\n/**\n *\n * @param password\n */\nasync function _confirmPassword(password: string) {\n\tconsole.debug('Confirming password')\n\n\tconst url = generateUrl('/login/confirm')\n\tconst { data } = await axios.post(url, { password })\n\twindow.nc_lastLogin = data.lastLogin\n\n\tconsole.debug('Password confirmed')\n}\n\n/**\n *\n */\nfunction getDialog(): Vue {\n\tif (window._nc_password_confirmation_dialog === undefined) {\n\t\tconsole.debug('Prompting password form')\n\t\tconst dialog = spawnDialog(PasswordDialogVue, {}, () => {})\n\t\twindow._nc_password_confirmation_dialog = dialog\n\t}\n\n\treturn window._nc_password_confirmation_dialog?.$children[0] as Vue\n}\n\n/**\n *\n * @param validate\n * @param close\n */\nfunction promptPassword(\n\tvalidate: (password: string) => Promise<void>,\n\tclose: () => void,\n) {\n\tconst dialog = getDialog()\n\n\tdialog.$props.validate = validate\n\n\tdialog.$on('confirmed', () => {\n\t\tdialog.$destroy()\n\t\tdelete window._nc_password_confirmation_dialog\n\t})\n\tdialog.$on('close', () => {\n\t\tdialog.$destroy()\n\t\tclose()\n\t\tdelete window._nc_password_confirmation_dialog\n\t})\n}\n\n/**\n * Add axios interceptors to an axios instance that will ask for\n * password confirmation to add it as Basic Auth for every requests.\n * @param axios\n */\nexport function addPasswordConfirmationInterceptors(axios: AxiosInstance): void {\n\tif (INTERCEPTOR_INITIALIZED) {\n\t\treturn\n\t}\n\n\tINTERCEPTOR_INITIALIZED = true\n\n\tlet validatePromise: PromiseWithResolvers<void>\n\n\taxios.interceptors.request.use(\n\t\tasync (config) => {\n\t\t\tif (config.confirmPassword === undefined) {\n\t\t\t\treturn config\n\t\t\t}\n\n\t\t\tif (!isPasswordConfirmationRequired(config.confirmPassword)) {\n\t\t\t\treturn config\n\t\t\t}\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tpromptPassword(\n\t\t\t\t\tasync (password: string) => {\n\t\t\t\t\t\tswitch (config.confirmPassword) {\n\t\t\t\t\t\tcase PwdConfirmationMode.Lax: {\n\t\t\t\t\t\t\tawait _confirmPassword(password)\n\t\t\t\t\t\t\tresolve(config)\n\t\t\t\t\t\t\treturn Promise.resolve()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase PwdConfirmationMode.Strict:\n\t\t\t\t\t\t\tconsole.debug('Adding auth info to the request', { config })\n\t\t\t\t\t\t\tconfig.auth = {\n\t\t\t\t\t\t\t\tusername: getCurrentUser()?.uid ?? '',\n\t\t\t\t\t\t\t\tpassword,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve(config)\n\n\t\t\t\t\t\t\tvalidatePromise = Promise.withResolvers<void>()\n\t\t\t\t\t\t\treturn validatePromise.promise\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\treject(new Error('Dialog closed'))\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t})\n\t\t},\n\t)\n\n\taxios.interceptors.response.use(\n\t\t(response) => {\n\t\t\tif (response.config.confirmPassword !== PwdConfirmationMode.Strict) {\n\t\t\t\treturn response\n\t\t\t}\n\n\t\t\tconsole.debug('Password confirmation succeeded', { response })\n\t\t\twindow.nc_lastLogin = Date.now() / 1000\n\t\t\tvalidatePromise.resolve()\n\n\t\t\treturn response\n\t\t},\n\t\t(error) => {\n\t\t\tif (error.config?.confirmPassword !== PwdConfirmationMode.Strict) {\n\t\t\t\tthrow error\n\t\t\t}\n\n\t\t\tconsole.debug('Password confirmation failed', { error })\n\t\t\tvalidatePromise.reject(error)\n\n\t\t\tif (!(error.response?.status === 403 && error.response.data.message === 'Password confirmation is required')) {\n\t\t\t\tthrow error\n\t\t\t}\n\n\t\t\t// If the password confirmation failed, we trigger another request.\n\t\t\t// that will go through the password confirmation flow again.\n\t\t\tconsole.debug('Triggering new request', { error })\n\t\t\treturn axios.request(error.config)\n\t\t},\n\t)\n}\n"],"names":["t","PwdConfirmationMode","axios"],"mappings":"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"}