{"version":3,"file":"calendar-node_modules_vue-click-outside_index_js.js?v=743ef6121f9034233dbc","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///calendar/node_modules/vue-click-outside/index.js"],"sourcesContent":["function validate(binding) {\n  if (typeof binding.value !== 'function') {\n    console.warn('[Vue-click-outside:] provided expression', binding.expression, 'is not a function.')\n    return false\n  }\n\n  return true\n}\n\nfunction isPopup(popupItem, elements) {\n  if (!popupItem || !elements)\n    return false\n\n  for (var i = 0, len = elements.length; i < len; i++) {\n    try {\n      if (popupItem.contains(elements[i])) {\n        return true\n      }\n      if (elements[i].contains(popupItem)) {\n        return false\n      }\n    } catch(e) {\n      return false\n    }\n  }\n\n  return false\n}\n\nfunction isServer(vNode) {\n  return typeof vNode.componentInstance !== 'undefined' && vNode.componentInstance.$isServer\n}\n\nexports = module.exports = {\n  bind: function (el, binding, vNode) {\n    if (!validate(binding)) return\n\n    // Define Handler and cache it on the element\n    function handler(e) {\n      if (!vNode.context) return\n\n      // some components may have related popup item, on which we shall prevent the click outside event handler.\n      var elements = e.path || (e.composedPath && e.composedPath())\n      elements && elements.length > 0 && elements.unshift(e.target)\n\n      if (el.contains(e.target) || isPopup(vNode.context.popupItem, elements)) return\n\n      el.__vueClickOutside__.callback(e)\n    }\n\n    // add Event Listeners\n    el.__vueClickOutside__ = {\n      handler: handler,\n      callback: binding.value\n    }\n    const clickHandler = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';\n    !isServer(vNode) && document.addEventListener(clickHandler, handler)\n  },\n\n  update: function (el, binding) {\n    if (validate(binding)) el.__vueClickOutside__.callback = binding.value\n  },\n\n  unbind: function (el, binding, vNode) {\n    // Remove Event Listeners\n    const clickHandler = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';\n    !isServer(vNode) && el.__vueClickOutside__ && document.removeEventListener(clickHandler, el.__vueClickOutside__.handler)\n    delete el.__vueClickOutside__\n  }\n}\n"],"names":[],"sourceRoot":""}