{"version":3,"file":"contacts-oca.mjs","sources":["../src/views/ReadOnlyContactDetails.vue","../src/oca/mountContactDetails.js","../src/oca.js"],"sourcesContent":["<!--\n  - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<div class=\"display-contact-details\">\n\t\t<div v-if=\"loading\" class=\"recipient-details-loading\">\n\t\t\t<NcLoadingIcon />\n\t\t</div>\n\t\t<!-- nothing selected or contact not found -->\n\t\t<NcEmptyContent v-else-if=\"!contact\"\n\t\t\tclass=\"empty-content\"\n\t\t\t:name=\"t('mail', 'No data for this contact')\"\n\t\t\t:description=\"t('mail', 'No data for this contact on their profile')\">\n\t\t\t<template #icon>\n\t\t\t\t<IconContact :size=\"20\" />\n\t\t\t</template>\n\t\t</NcEmptyContent>\n\t\t<div v-else\n\t\t\tclass=\"recipient-details-content\">\n\t\t\t<div class=\"contact-title\">\n\t\t\t\t<h6>{{ contact.fullName }}</h6>\n\t\t\t\t<!-- Subtitle -->\n\t\t\t\t<span v-html=\"formattedSubtitle\" />\n\t\t\t</div>\n\t\t\t<div class=\"contact-details-wrapper\">\n\t\t\t\t<div v-for=\"(properties, name) in groupedProperties\"\n\t\t\t\t\t:key=\"name\">\n\t\t\t\t\t<ContactDetailsProperty v-for=\"(property, index) in properties\"\n\t\t\t\t\t\t:key=\"`${index}-${contact.key}-${property.name}`\"\n\t\t\t\t\t\t:is-first-property=\"index === 0\"\n\t\t\t\t\t\t:is-last-property=\"index === properties.length - 1\"\n\t\t\t\t\t\t:property=\"property\"\n\t\t\t\t\t\t:contact=\"contact\"\n\t\t\t\t\t\t:local-contact=\"localContact\"\n\t\t\t\t\t\t:contacts=\"[contact]\"\n\t\t\t\t\t\t:is-read-only=\"true\"\n\t\t\t\t\t\t:bus=\"bus\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { isMobile, NcEmptyContent, NcLoadingIcon } from '@nextcloud/vue'\nimport IconContact from 'vue-material-design-icons/AccountMultiple.vue'\nimport mitt from 'mitt'\nimport { namespaces as NS } from '@nextcloud/cdav-library'\nimport { loadState } from '@nextcloud/initial-state'\nimport ContactDetailsProperty from '../components/ContactDetails/ContactDetailsProperty.vue'\nimport Contact from '../models/contact.js'\nimport rfcProps from '../models/rfcProps.js'\nimport validate from '../services/validate.js'\nimport client from '../services/cdav.js'\nimport usePrincipalsStore from '../store/principals.js'\n\nconst { profileEnabled } = loadState('user_status', 'profileEnabled', false)\n\nexport default {\n\tname: 'ReadOnlyContactDetails',\n\n\tcomponents: {\n\t\tContactDetailsProperty,\n\t\tNcEmptyContent,\n\t\tIconContact,\n\t\tNcLoadingIcon,\n\t},\n\n\tmixins: [isMobile],\n\n\tprops: {\n\t\tcontactEmailAddress: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tdesc: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: '',\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tcontactDetailsSelector: '.contact-details',\n\t\t\texcludeFromBirthdayKey: 'x-nc-exclude-from-birthday-calendar',\n\n\t\t\tbus: mitt(),\n\t\t\tshowMenuPopover: false,\n\t\t\tprofileEnabled,\n\t\t\tcontact: undefined,\n\t\t\tlocalContact: undefined,\n\t\t\tloading: true,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t/**\n\t\t * Read-only representation of the contact title and organization.\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\tformattedSubtitle() {\n\t\t\tconst title = this.contact.title\n\t\t\tconst organization = this.contact.org\n\n\t\t\tif (title && organization) {\n\t\t\t\treturn t('contacts', '{title} at {organization}', {\n\t\t\t\t\ttitle,\n\t\t\t\t\torganization,\n\t\t\t\t})\n\t\t\t} else if (title) {\n\t\t\t\treturn title\n\t\t\t} else if (organization) {\n\t\t\t\treturn organization\n\t\t\t}\n\n\t\t\treturn ''\n\t\t},\n\t\taddressbooks() {\n\t\t\treturn this.$store.getters.getAddressbooks\n\t\t},\n\t\t/**\n\t\t * Contact properties copied and sorted by rfcProps.fieldOrder\n\t\t *\n\t\t * @return {Array}\n\t\t */\n\t\tsortedProperties() {\n\t\t\tif (!this.localContact || !this.localContact.properties) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\treturn this.localContact.properties\n\t\t\t\t.toSorted((a, b) => {\n\t\t\t\t\tconst nameA = a.name.split('.').pop()\n\t\t\t\t\tconst nameB = b.name.split('.').pop()\n\t\t\t\t\treturn rfcProps.fieldOrder.indexOf(nameA) - rfcProps.fieldOrder.indexOf(nameB)\n\t\t\t\t})\n\t\t},\n\n\t\t/**\n\t\t * Contact properties filtered and grouped by rfcProps.fieldOrder\n\t\t *\n\t\t * @return {object}\n\t\t */\n\t\tgroupedProperties() {\n\t\t\tif (!this.sortedProperties) {\n\t\t\t\treturn {}\n\t\t\t}\n\t\t\treturn this.sortedProperties.reduce((list, property) => {\n\t\t\t\tif (!this.canDisplay(property)) {\n\t\t\t\t\treturn list\n\t\t\t\t}\n\t\t\t\tif (!list[property.name]) {\n\t\t\t\t\tlist[property.name] = []\n\t\t\t\t}\n\t\t\t\tlist[property.name].push(property)\n\t\t\t\treturn list\n\t\t\t}, {})\n\t\t},\n\t\t/**\n\t\t * The address book is read-only (e.g. shared with me).\n\t\t *\n\t\t * @return {boolean}\n\t\t */\n\t\taddressbookIsReadOnly() {\n\t\t\treturn this.contact.addressbook?.readOnly\n\t\t},\n\t\t/**\n\t\t * Usable addressbook object linked to the local contact\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\taddressbook() {\n\t\t\treturn this.contact.addressbook.id\n\t\t},\n\n\t\t/**\n\t\t * Fake model to use the propertyGroups component\n\t\t *\n\t\t * @return {object}\n\t\t */\n\t\tgroupsModel() {\n\t\t\treturn {\n\t\t\t\treadableName: t('mail', 'Contact groups'),\n\t\t\t\ticon: 'icon-contacts-dark',\n\t\t\t}\n\t\t},\n\t},\n\twatch: {\n\t\tcontact: {\n\t\t\thandler(contact) {\n\t\t\t\tthis.updateLocalContact(contact)\n\t\t\t},\n\t\t\timmediate: true,\n\t\t},\n\t},\n\tasync beforeMount() {\n\t\t// Init client and stores\n\t\tawait client.connect({ enableCardDAV: true })\n\t\tconst principalsStore = usePrincipalsStore()\n\t\tprincipalsStore.setCurrentUserPrincipal(client)\n\t\tawait this.$store.dispatch('getAddressbooks')\n\n\t\t// Fetch contact\n\t\tawait this.fetchContact()\n\t},\n\tmethods: {\n\t\tasync fetchContact() {\n\t\t\ttry {\n\t\t\t\tconst email = this.contactEmailAddress\n\t\t\t\tconst result = await Promise.all(\n\t\t\t\t\tthis.addressbooks.map(async (addressBook) => [\n\t\t\t\t\t\taddressBook.dav,\n\t\t\t\t\t\tawait addressBook.dav.addressbookQuery([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: [NS.IETF_CARDDAV, 'prop-filter'],\n\t\t\t\t\t\t\t\tattributes: [['name', 'EMAIL']],\n\t\t\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: [NS.IETF_CARDDAV, 'text-match'],\n\t\t\t\t\t\t\t\t\t\tvalue: email,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]),\n\t\t\t\t\t]),\n\t\t\t\t)\n\n\t\t\t\tconst contacts = result.flatMap(([addressBook, vcards]) =>\n\t\t\t\t\tvcards.map((vcard) => new Contact(vcard.data, addressBook)),\n\t\t\t\t)\n\n\t\t\t\tthis.contact = contacts.find((contact) => contact.email === email)\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error fetching contact:', error)\n\t\t\t} finally {\n\t\t\t\tthis.loading = false\n\t\t\t}\n\t\t},\n\t\tupdateGroups(value) {\n\t\t\tthis.newGroupsValue = value\n\t\t},\n\t\t/**\n\t\t *  Update this.localContact\n\t\t *\n\t\t * @param {Contact} contact the contact to clone\n\t\t */\n\t\tasync updateLocalContact(contact) {\n\t\t\tif (!contact) {\n\t\t\t\tthis.localContact = undefined\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// create empty contact and copy inner data\n\t\t\tconst localContact = Object.assign(\n\t\t\t\tObject.create(Object.getPrototypeOf(contact)),\n\t\t\t\tcontact,\n\t\t\t)\n\t\t\tvalidate(localContact)\n\n\t\t\tthis.localContact = localContact\n\t\t\tthis.newGroupsValue = [...this.localContact.groups]\n\t\t},\n\t\t/**\n\t\t * Should display the property\n\t\t *\n\t\t * @param {Property} property the property to check\n\t\t * @return {boolean}\n\t\t */\n\t\tcanDisplay(property) {\n\t\t\t// Make sure we have some model for the property and check for ITEM.PROP custom label format\n\t\t\tconst propModel = rfcProps.properties[property.name.split('.').pop()]\n\n\t\t\tconst propType = propModel && propModel.force\n\t\t\t\t? propModel.force\n\t\t\t\t: property.getDefaultType()\n\n\t\t\treturn propModel && propType !== 'unknown'\n\t\t},\n\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.empty-content {\n\theight: 100%;\n}\n\n.contact-title {\n\tmargin-left: 100px;\n\tmargin-top: 40px;\n}\n\n:deep(.property__value) {\n\tfont-size: medium !important;\n}\n\n.recipient-details-loading {\n\tmargin-top: 64px;\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport Vue from 'vue'\nimport ReadOnlyContactDetails from '../views/ReadOnlyContactDetails.vue'\nimport { createPinia, PiniaVuePlugin } from 'pinia'\n\n/** GLOBAL COMPONENTS AND DIRECTIVE */\nimport ClickOutside from 'vue-click-outside'\nimport { Tooltip as VTooltip } from '@nextcloud/vue'\n\nimport store from '../store/index.js'\nimport logger from '../services/logger.js'\n\n/**\n * @param {HTMLElement} el\n * @param {string} contactEmailAddress\n * @return {Promise<object>}\n */\nexport function mountContactDetails(el, contactEmailAddress) {\n\tVue.use(PiniaVuePlugin)\n\tconst pinia = createPinia()\n\n\t// Register global directives\n\tVue.directive('ClickOutside', ClickOutside)\n\tVue.directive('Tooltip', VTooltip)\n\n\tVue.prototype.t = t\n\tVue.prototype.n = n\n\n\tVue.prototype.appName = appName\n\tVue.prototype.appVersion = appVersion\n\tVue.prototype.logger = logger\n\tVue.prototype.OC = window.OC\n\tVue.prototype.OCA = window.OCA\n\n\tconst Component = Vue.extend(ReadOnlyContactDetails)\n\tconst vueElement = new Component({\n\t\tpinia,\n\t\tstore,\n\t\tpropsData: {\n\t\t\tcontactEmailAddress,\n\t\t},\n\t}).$mount(el)\n\treturn vueElement\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n// eslint-disable-next-line import/no-unresolved, n/no-missing-import\nimport 'vite/modulepreload-polyfill'\n\n// Global scss sheets\nimport './css/contacts.scss'\n\n// Dialogs css\nimport '@nextcloud/dialogs/style.css'\n\nimport { mountContactDetails } from './oca/mountContactDetails.js'\n\nwindow.OCA ??= {}\nwindow.OCA.Contacts = {\n\t/**\n\t * @param {HTMLElement} el Html element to mount the component at\n\t * @param {string} contactEmailAddress Email address of the contact whose details to display\n\t * @return {Promise<object>} Mounted Vue instance (vm)\n\t */\n\tasync mountContactDetails(el, contactEmailAddress) {\n\t\treturn mountContactDetails(el, contactEmailAddress)\n\t},\n}\n"],"names":["isMobile","NS"],"mappings":"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"}