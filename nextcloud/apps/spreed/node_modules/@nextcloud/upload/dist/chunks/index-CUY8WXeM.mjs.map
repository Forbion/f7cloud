{"version":3,"file":"index-CUY8WXeM.mjs","sources":["../../lib/utils/upload.ts","../../lib/utils/config.ts","../../lib/upload.ts","../../lib/utils/filesystem.ts","../../lib/utils/fileTree.ts","../../lib/utils/l10n.ts","../../lib/utils/logger.ts","../../lib/uploader.ts","../../node_modules/vue-material-design-icons/Cancel.vue","../../node_modules/vue-material-design-icons/FolderUpload.vue","../../node_modules/vue-material-design-icons/Plus.vue","../../node_modules/vue-material-design-icons/Upload.vue","../../lib/components/InvalidFilenameDialog.vue","../../lib/components/UploadPicker.vue","../../lib/index.ts"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { AxiosProgressEvent, AxiosResponse } from 'axios'\nimport { generateRemoteUrl } from '@nextcloud/router'\nimport { getCurrentUser } from '@nextcloud/auth'\nimport axios from '@nextcloud/axios'\nimport axiosRetry, { exponentialDelay } from 'axios-retry'\n\naxiosRetry(axios, { retries: 0 })\n\ntype UploadData = Blob | (() => Promise<Blob>)\n\n/**\n * Upload some data to a given path\n * @param url the url to upload to\n * @param uploadData the data to upload\n * @param signal the abort signal\n * @param onUploadProgress the progress callback\n * @param destinationFile the final destination file (often used for chunked uploads)\n * @param headers additional headers\n * @param retries number of retries\n */\nexport const uploadData = async function(\n\turl: string,\n\tuploadData: UploadData,\n\tsignal: AbortSignal,\n\tonUploadProgress:(event: AxiosProgressEvent) => void = () => {},\n\tdestinationFile: string | undefined = undefined,\n\theaders: Record<string, string|number> = {},\n\tretries: number = 5,\n): Promise<AxiosResponse> {\n\tlet data: Blob\n\n\t// If the upload data is a blob, we can directly use it\n\t// Otherwise, we need to wait for the promise to resolve\n\tif (uploadData instanceof Blob) {\n\t\tdata = uploadData\n\t} else {\n\t\tdata = await uploadData()\n\t}\n\n\t// Helps the server to know what to do with the file afterwards (e.g. chunked upload)\n\tif (destinationFile) {\n\t\theaders.Destination = destinationFile\n\t}\n\n\t// If no content type is set, we default to octet-stream\n\tif (!headers['Content-Type']) {\n\t\theaders['Content-Type'] = 'application/octet-stream'\n\t}\n\n\treturn await axios.request({\n\t\tmethod: 'PUT',\n\t\turl,\n\t\tdata,\n\t\tsignal,\n\t\tonUploadProgress,\n\t\theaders,\n\t\t'axios-retry': {\n\t\t\tretries,\n\t\t\tretryDelay: (retryCount, error) => exponentialDelay(retryCount, error, 1000),\n\t\t},\n\t})\n}\n\n/**\n * Get chunk of the file.\n * Doing this on the fly give us a big performance boost and proper garbage collection\n * @param file File to upload\n * @param start Offset to start upload\n * @param length Size of chunk to upload\n */\nexport const getChunk = function(file: File, start: number, length: number): Promise<Blob> {\n\tif (start === 0 && file.size <= length) {\n\t\treturn Promise.resolve(new Blob([file], { type: file.type || 'application/octet-stream' }))\n\t}\n\n\treturn Promise.resolve(new Blob([file.slice(start, start + length)], { type: 'application/octet-stream' }))\n}\n\n/**\n * Create a temporary upload workspace to upload the chunks to\n * @param destinationFile The file name after finishing the chunked upload\n * @param retries number of retries\n */\nexport const initChunkWorkspace = async function(destinationFile: string | undefined = undefined, retries: number = 5): Promise<string> {\n\tconst chunksWorkspace = generateRemoteUrl(`dav/uploads/${getCurrentUser()?.uid}`)\n\tconst hash = [...Array(16)].map(() => Math.floor(Math.random() * 16).toString(16)).join('')\n\tconst tempWorkspace = `web-file-upload-${hash}`\n\tconst url = `${chunksWorkspace}/${tempWorkspace}`\n\tconst headers = destinationFile ? { Destination: destinationFile } : undefined\n\n\tawait axios.request({\n\t\tmethod: 'MKCOL',\n\t\turl,\n\t\theaders,\n\t\t'axios-retry': {\n\t\t\tretries,\n\t\t\tretryDelay: (retryCount, error) => exponentialDelay(retryCount, error, 1000),\n\t\t},\n\t})\n\n\treturn url\n}\n","/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nexport const getMaxChunksSize = function(fileSize: number | undefined = undefined): number {\n\tconst maxChunkSize = window.OC?.appConfig?.files?.max_chunk_size\n\tif (maxChunkSize <= 0) {\n\t\treturn 0\n\t}\n\n\t// If invalid return default\n\tif (!Number(maxChunkSize)) {\n\t\treturn 10 * 1024 * 1024\n\t}\n\n\t// v2 of chunked upload requires chunks to be 5 MB at minimum\n\tconst minimumChunkSize = Math.max(Number(maxChunkSize), 5 * 1024 * 1024)\n\n\tif (fileSize === undefined) {\n\t\treturn minimumChunkSize\n\t}\n\n\t// Adapt chunk size to fit the file in 10000 chunks for chunked upload v2\n\treturn Math.max(minimumChunkSize, Math.ceil(fileSize / 10000))\n}\n","/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { AxiosResponse } from 'axios'\nimport { getMaxChunksSize } from './utils/config.js'\n\nexport enum Status {\n\tINITIALIZED = 0,\n\tUPLOADING = 1,\n\tASSEMBLING = 2,\n\tFINISHED = 3,\n\tCANCELLED = 4,\n\tFAILED = 5,\n}\nexport class Upload {\n\n\tprivate _source: string\n\tprivate _file: File\n\tprivate _isChunked: boolean\n\tprivate _chunks: number\n\n\tprivate _size: number\n\tprivate _uploaded = 0\n\tprivate _startTime = 0\n\n\tprivate _status: Status = Status.INITIALIZED\n\tprivate _controller: AbortController\n\tprivate _response: AxiosResponse|null = null\n\n\tconstructor(source: string, chunked = false, size: number, file: File) {\n\t\tconst chunks = Math.min(getMaxChunksSize() > 0 ? Math.ceil(size / getMaxChunksSize()) : 1, 10000)\n\t\tthis._source = source\n\t\tthis._isChunked = chunked && getMaxChunksSize() > 0 && chunks > 1\n\t\tthis._chunks = this._isChunked ? chunks : 1\n\t\tthis._size = size\n\t\tthis._file = file\n\t\tthis._controller = new AbortController()\n\t}\n\n\tget source(): string {\n\t\treturn this._source\n\t}\n\n\tget file(): File {\n\t\treturn this._file\n\t}\n\n\tget isChunked(): boolean {\n\t\treturn this._isChunked\n\t}\n\n\tget chunks(): number {\n\t\treturn this._chunks\n\t}\n\n\tget size(): number {\n\t\treturn this._size\n\t}\n\n\tget startTime(): number {\n\t\treturn this._startTime\n\t}\n\n\tset response(response: AxiosResponse|null) {\n\t\tthis._response = response\n\t}\n\n\tget response(): AxiosResponse|null {\n\t\treturn this._response\n\t}\n\n\tget uploaded(): number {\n\t\treturn this._uploaded\n\t}\n\n\t/**\n\t * Update the uploaded bytes of this upload\n\t */\n\tset uploaded(length: number) {\n\t\tif (length >= this._size) {\n\t\t\tthis._status = this._isChunked\n\t\t\t\t? Status.ASSEMBLING\n\t\t\t\t: Status.FINISHED\n\t\t\tthis._uploaded = this._size\n\t\t\treturn\n\t\t}\n\n\t\tthis._status = Status.UPLOADING\n\t\tthis._uploaded = length\n\n\t\t// If first progress, let's log the start time\n\t\tif (this._startTime === 0) {\n\t\t\tthis._startTime = new Date().getTime()\n\t\t}\n\t}\n\n\tget status(): number {\n\t\treturn this._status\n\t}\n\n\t/**\n\t * Update this upload status\n\t */\n\tset status(status: Status) {\n\t\tthis._status = status\n\t}\n\n\t/**\n\t * Returns the axios cancel token source\n\t */\n\tget signal(): AbortSignal {\n\t\treturn this._controller.signal\n\t}\n\n\t/**\n\t * Cancel any ongoing requests linked to this upload\n\t */\n\tcancel() {\n\t\tthis._controller.abort()\n\t\tthis._status = Status.CANCELLED\n\t}\n\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n// Helpers for the File and Directory API\n\n// Helper to support browser that do not support the API\nexport const isFileSystemDirectoryEntry = (o: unknown): o is FileSystemDirectoryEntry => 'FileSystemDirectoryEntry' in window && o instanceof FileSystemDirectoryEntry\n\nexport const isFileSystemFileEntry = (o: unknown): o is FileSystemFileEntry => 'FileSystemFileEntry' in window && o instanceof FileSystemFileEntry\n\nexport const isFileSystemEntry = (o: unknown): o is FileSystemEntry => 'FileSystemEntry' in window && o instanceof FileSystemEntry\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n/**\n * Helpers to generate a file tree when the File and Directory API is used (e.g. Drag and Drop or <input type=\"file\" webkitdirectory>)\n */\n\nimport { basename } from '@nextcloud/paths'\nimport { isFileSystemDirectoryEntry, isFileSystemFileEntry } from './filesystem.ts'\n\n/**\n * This is a helper class to allow building a file tree for uploading\n * It allows to create virtual directories\n */\nexport class Directory extends File {\n\n\tprivate _originalName: string\n\tprivate _path: string\n\tprivate _children: Map<string, File|this>\n\n\tconstructor(path: string, children?: Array<File|FileSystemEntry>) {\n\t\tsuper([], basename(path), { type: 'httpd/unix-directory', lastModified: 0 })\n\t\tthis._children = new Map()\n\t\tthis._originalName = basename(path)\n\t\tthis._path = path\n\n\t\tif (children) {\n\t\t\tchildren.forEach((c) => this.addChild(c))\n\t\t}\n\t}\n\n\tget size(): number {\n\t\treturn this.children.reduce((sum, file) => sum + file.size, 0)\n\t}\n\n\tget lastModified(): number {\n\t\treturn this.children.reduce((latest, file) => Math.max(latest, file.lastModified), 0)\n\t}\n\n\t// We need this to keep track of renamed files\n\tget originalName(): string {\n\t\treturn this._originalName\n\t}\n\n\tget children(): Array<File|Directory> {\n\t\treturn Array.from(this._children.values())\n\t}\n\n\tget webkitRelativePath(): string {\n\t\treturn this._path\n\t}\n\n\tgetChild(name: string): File|Directory|null {\n\t\treturn this._children.get(name) ?? null\n\t}\n\n\tasync addChild(file: File|FileSystemEntry) {\n\t\tconst rootPath = this._path && `${this._path}/`\n\t\tif (isFileSystemFileEntry(file)) {\n\t\t\tfile = await new Promise<File>((resolve, reject) => (file as FileSystemFileEntry).file(resolve, reject))\n\t\t} else if (isFileSystemDirectoryEntry(file)) {\n\t\t\tconst reader = file.createReader()\n\t\t\tconst entries = await new Promise<FileSystemEntry[]>((resolve, reject) => reader.readEntries(resolve, reject))\n\t\t\tthis._children.set(file.name, new Directory(`${rootPath}${file.name}`, entries))\n\t\t\treturn\n\t\t}\n\n\t\t// Make Typescript calm - we ensured it is not a file system entry above.\n\t\tfile = file as File\n\n\t\tconst filePath = file.webkitRelativePath ?? file.name\n\t\t// Handle plain files\n\t\tif (!filePath.includes('/')) {\n\t\t\t// Direct child of the directory\n\t\t\tthis._children.set(file.name, file)\n\t\t} else {\n\t\t\t// Check if file is a child\n\t\t\tif (!filePath.startsWith(this._path)) {\n\t\t\t\tthrow new Error(`File ${filePath} is not a child of ${this._path}`)\n\t\t\t}\n\t\t\t// If file is a child check if we need to nest it\n\t\t\tconst relPath = filePath.slice(rootPath.length)\n\t\t\tconst name = basename(relPath)\n\t\t\t// It is a direct child\n\t\t\tif (name === relPath) {\n\t\t\t\tthis._children.set(name, file)\n\t\t\t} else {\n\t\t\t\tconst base = relPath.slice(0, relPath.indexOf('/'))\n\t\t\t\tif (this._children.has(base)) {\n\t\t\t\t\t(this._children.get(base) as Directory).addChild(file)\n\t\t\t\t} else {\n\t\t\t\t\tthis._children.set(base, new Directory(`${rootPath}${base}`, [file]))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/**\n * Interface of the internal Directory class\n */\nexport type IDirectory = Pick<Directory, keyof Directory>\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { getGettextBuilder } from '@nextcloud/l10n/gettext'\n\nconst gtBuilder = getGettextBuilder()\n\t.detectLocale()\n\n// @ts-expect-error __TRANSLATIONS__ is replaced by vite\n__TRANSLATIONS__.map(data => gtBuilder.addTranslation(data.locale, data.json))\n\ninterface Gettext {\n\t/**\n\t * Get translated string (singular form), optionally with placeholders\n\t *\n\t * @param original original string to translate\n\t * @param placeholders map of placeholder key to value\n\t */\n\tgettext(original: string, placeholders?: Record<string, string | number>): string\n\n\t/**\n\t * Get translated string with plural forms\n\t *\n\t * @param singular Singular text form\n\t * @param plural Plural text form to be used if `count` requires it\n\t * @param count The number to insert into the text\n\t * @param placeholders optional map of placeholder key to value\n\t */\n\tngettext(singular: string, plural: string, count: number, placeholders?: Record<string, string | number>): string\n}\n\nconst gt = gtBuilder.build() as Gettext\n\nexport const n = gt.ngettext.bind(gt) as typeof gt.ngettext\nexport const t = gt.gettext.bind(gt) as typeof gt.gettext\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { getLoggerBuilder } from '@nextcloud/logger'\n\nexport default getLoggerBuilder()\n\t.setApp('@nextcloud/upload')\n\t.detectUser()\n\t.build()\n","/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { AxiosError, AxiosResponse } from 'axios'\nimport type { WebDAVClient } from 'webdav'\nimport type { IDirectory } from './utils/fileTree'\n\nimport { getCurrentUser } from '@nextcloud/auth'\nimport { FileType, Folder, Permission, davGetClient, davRemoteURL, davRootPath } from '@nextcloud/files'\nimport { encodePath } from '@nextcloud/paths'\nimport { normalize } from 'path'\n\nimport axios, { isCancel } from '@nextcloud/axios'\nimport PCancelable from 'p-cancelable'\nimport PQueue from 'p-queue'\n\nimport { getChunk, initChunkWorkspace, uploadData } from './utils/upload.js'\nimport { getMaxChunksSize } from './utils/config.js'\nimport { Status as UploadStatus, Upload } from './upload.js'\nimport { isFileSystemFileEntry } from './utils/filesystem.js'\nimport { Directory } from './utils/fileTree.js'\nimport { t } from './utils/l10n.js'\nimport logger from './utils/logger.js'\n\nexport enum Status {\n\tIDLE = 0,\n\tUPLOADING = 1,\n\tPAUSED = 2\n}\n\n// Maximum number of concurrent uploads\nconst MAX_CONCURRENCY = 5\n\nexport class Uploader {\n\n\t// Initialized via setter in the constructor\n\tprivate _destinationFolder!: Folder\n\tprivate _isPublic: boolean\n\tprivate _customHeaders: Record<string, string>\n\n\t// Global upload queue\n\tprivate _uploadQueue: Array<Upload> = []\n\tprivate _jobQueue: PQueue = new PQueue({ concurrency: MAX_CONCURRENCY })\n\tprivate _queueSize = 0\n\tprivate _queueProgress = 0\n\tprivate _queueStatus: Status = Status.IDLE\n\n\tprivate _notifiers: Array<(upload: Upload) => void> = []\n\n\t/**\n\t * Initialize uploader\n\t *\n\t * @param {boolean} isPublic are we in public mode ?\n\t * @param {Folder} destinationFolder the context folder to operate, relative to the root folder\n\t */\n\tconstructor(\n\t\tisPublic = false,\n\t\tdestinationFolder?: Folder,\n\t) {\n\t\tthis._isPublic = isPublic\n\t\tthis._customHeaders = {}\n\n\t\tif (!destinationFolder) {\n\t\t\tconst source = `${davRemoteURL}${davRootPath}`\n\t\t\tlet owner: string\n\n\t\t\tif (isPublic) {\n\t\t\t\towner = 'anonymous'\n\t\t\t} else {\n\t\t\t\tconst user = getCurrentUser()?.uid\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Error('User is not logged in')\n\t\t\t\t}\n\t\t\t\towner = user\n\t\t\t}\n\n\t\t\tdestinationFolder = new Folder({\n\t\t\t\tid: 0,\n\t\t\t\towner,\n\t\t\t\tpermissions: Permission.ALL,\n\t\t\t\troot: davRootPath,\n\t\t\t\tsource,\n\t\t\t})\n\t\t}\n\t\tthis.destination = destinationFolder\n\n\t\t// Reset when upload queue is done\n\t\tthis._jobQueue.addListener('idle', () => this.reset())\n\n\t\tlogger.debug('Upload workspace initialized', {\n\t\t\tdestination: this.destination,\n\t\t\troot: this.root,\n\t\t\tisPublic,\n\t\t\tmaxChunksSize: getMaxChunksSize(),\n\t\t})\n\t}\n\n\t/**\n\t * Get the upload destination path relative to the root folder\n\t */\n\tget destination(): Folder {\n\t\treturn this._destinationFolder\n\t}\n\n\t/**\n\t * Set the upload destination path relative to the root folder\n\t */\n\tset destination(folder: Folder) {\n\t\tif (!folder || folder.type !== FileType.Folder || !folder.source) {\n\t\t\tthrow new Error('Invalid destination folder')\n\t\t}\n\n\t\tlogger.debug('Destination set', { folder })\n\t\tthis._destinationFolder = folder\n\t}\n\n\t/**\n\t * Get the root folder\n\t */\n\tget root() {\n\t\treturn this._destinationFolder.source\n\t}\n\n\t/**\n\t * Get registered custom headers for uploads\n\t */\n\tget customHeaders(): Record<string, string> {\n\t\treturn structuredClone(this._customHeaders)\n\t}\n\n\t/**\n\t * Set a custom header\n\t * @param name The header to set\n\t * @param value The string value\n\t */\n\tsetCustomHeader(name: string, value: string = ''): void {\n\t\tthis._customHeaders[name] = value\n\t}\n\n\t/**\n\t * Unset a custom header\n\t * @param name The header to unset\n\t */\n\tdeleteCustomerHeader(name: string): void {\n\t\tdelete this._customHeaders[name]\n\t}\n\n\t/**\n\t * Get the upload queue\n\t */\n\tget queue() {\n\t\treturn this._uploadQueue\n\t}\n\n\tprivate reset() {\n\t\t// Reset upload queue but keep the reference\n\t\tthis._uploadQueue.splice(0, this._uploadQueue.length)\n\t\tthis._jobQueue.clear()\n\t\tthis._queueSize = 0\n\t\tthis._queueProgress = 0\n\t\tthis._queueStatus = Status.IDLE\n\t}\n\n\t/**\n\t * Pause any ongoing upload(s)\n\t */\n\tpublic pause() {\n\t\tthis._jobQueue.pause()\n\t\tthis._queueStatus = Status.PAUSED\n\t}\n\n\t/**\n\t * Resume any pending upload(s)\n\t */\n\tpublic start() {\n\t\tthis._jobQueue.start()\n\t\tthis._queueStatus = Status.UPLOADING\n\t\tthis.updateStats()\n\t}\n\n\t/**\n\t * Get the upload queue stats\n\t */\n\tget info() {\n\t\treturn {\n\t\t\tsize: this._queueSize,\n\t\t\tprogress: this._queueProgress,\n\t\t\tstatus: this._queueStatus,\n\t\t}\n\t}\n\n\tprivate updateStats() {\n\t\tconst size = this._uploadQueue.map(upload => upload.size)\n\t\t\t.reduce((partialSum, a) => partialSum + a, 0)\n\t\tconst uploaded = this._uploadQueue.map(upload => upload.uploaded)\n\t\t\t.reduce((partialSum, a) => partialSum + a, 0)\n\n\t\tthis._queueSize = size\n\t\tthis._queueProgress = uploaded\n\n\t\t// If already paused keep it that way\n\t\tif (this._queueStatus === Status.PAUSED) {\n\t\t\treturn\n\t\t}\n\t\tthis._queueStatus = this._jobQueue.size > 0\n\t\t\t? Status.UPLOADING\n\t\t\t: Status.IDLE\n\t}\n\n\taddNotifier(notifier: (upload: Upload) => void) {\n\t\tthis._notifiers.push(notifier)\n\t}\n\n\t/**\n\t * Notify listeners of the upload completion\n\t * @param upload The upload that finished\n\t */\n\tprivate _notifyAll(upload: Upload): void {\n\t\tfor (const notifier of this._notifiers) {\n\t\t\ttry {\n\t\t\t\tnotifier(upload)\n\t\t\t} catch (error) {\n\t\t\t\tlogger.warn('Error in upload notifier', { error, source: upload.source })\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Uploads multiple files or folders while preserving the relative path (if available)\n\t * @param {string} destination The destination path relative to the root folder. e.g. /foo/bar (a file \"a.txt\" will be uploaded then to \"/foo/bar/a.txt\")\n\t * @param {Array<File|FileSystemEntry>} files The files and/or folders to upload\n\t * @param {Function} callback Callback that receives the nodes in the current folder and the current path to allow resolving conflicts, all nodes that are returned will be uploaded (if a folder does not exist it will be created)\n\t * @return Cancelable promise that resolves to an array of uploads\n\t *\n\t * @example\n\t * ```ts\n\t * // For example this is from handling the onchange event of an input[type=file]\n\t * async handleFiles(files: File[]) {\n\t *   this.uploads = await this.uploader.batchUpload('uploads', files, this.handleConflicts)\n\t * }\n\t *\n\t * async handleConflicts(nodes: File[], currentPath: string) {\n\t *   const conflicts = getConflicts(nodes, this.fetchContent(currentPath))\n\t *   if (conflicts.length === 0) {\n\t *     // No conflicts so upload all\n\t *     return nodes\n\t *   } else {\n\t *     // Open the conflict picker to resolve conflicts\n\t *     try {\n\t *       const { selected, renamed } = await openConflictPicker(currentPath, conflicts, this.fetchContent(currentPath), { recursive: true })\n\t *       return [...selected, ...renamed]\n\t *     } catch (e) {\n\t *       return false\n\t *     }\n\t *   }\n\t * }\n\t * ```\n\t */\n\tbatchUpload(\n\t\tdestination: string,\n\t\tfiles: (File|FileSystemEntry)[],\n\t\tcallback?: (nodes: Array<File|IDirectory>, currentPath: string) => Promise<Array<File|IDirectory>|false>,\n\t): PCancelable<Upload[]> {\n\t\tconst rootFolder = new Directory('', files)\n\t\tif (!callback) {\n\t\t\tcallback = async (files: Array<File|Directory>) => files\n\t\t}\n\n\t\treturn new PCancelable(async (resolve, reject, onCancel) => {\n\t\t\t// create a meta upload to ensure all ongoing child requests are listed\n\t\t\tconst upload = new Upload(`${this.root.replace(/\\/$/, '')}/${destination.replace(/^\\//, '')}`, false, 0, rootFolder)\n\t\t\tupload.status = UploadStatus.UPLOADING\n\t\t\tthis._uploadQueue.push(upload)\n\t\t\ttry {\n\t\t\t\t// setup client with root and custom header\n\t\t\t\tconst client = davGetClient(this.root, this._customHeaders)\n\t\t\t\t// Create the promise for the virtual root directory\n\t\t\t\tconst promise = this.uploadDirectory(destination, rootFolder, callback, client)\n\t\t\t\t// Make sure to cancel it when requested\n\t\t\t\tonCancel(() => promise.cancel())\n\t\t\t\t// await the uploads and resolve with \"finished\" status\n\t\t\t\tconst uploads = await promise\n\t\t\t\tupload.status = UploadStatus.FINISHED\n\t\t\t\tresolve(uploads)\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error('Error in batch upload', { error })\n\t\t\t\tupload.status = UploadStatus.FAILED\n\t\t\t\treject(t('Upload has been cancelled'))\n\t\t\t} finally {\n\t\t\t\tthis._notifyAll(upload)\n\t\t\t\tthis.updateStats()\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Helper to create a directory wrapped inside an Upload class\n\t * @param destination Destination where to create the directory\n\t * @param directory The directory to create\n\t * @param client The cached WebDAV client\n\t */\n\tprivate createDirectory(destination: string, directory: Directory, client: WebDAVClient): PCancelable<Upload> {\n\t\tconst folderPath = normalize(`${destination}/${directory.name}`).replace(/\\/$/, '')\n\t\tconst rootPath = `${this.root.replace(/\\/$/, '')}/${folderPath.replace(/^\\//, '')}`\n\n\t\tif (!directory.name) {\n\t\t\tthrow new Error('Can not create empty directory')\n\t\t}\n\n\t\t// Add a new upload to the upload queue\n\t\tconst currentUpload: Upload = new Upload(rootPath, false, 0, directory)\n\t\tthis._uploadQueue.push(currentUpload)\n\n\t\t// Return the cancelable promise\n\t\treturn new PCancelable(async (resolve, reject, onCancel) => {\n\t\t\tconst abort = new AbortController()\n\t\t\tonCancel(() => abort.abort())\n\t\t\tcurrentUpload.signal.addEventListener('abort', () => reject(t('Upload has been cancelled')))\n\n\t\t\t// Add the request to the job queue -> wait for finish to resolve the promise\n\t\t\tawait this._jobQueue.add(async () => {\n\t\t\t\tcurrentUpload.status = UploadStatus.UPLOADING\n\t\t\t\ttry {\n\t\t\t\t\tawait client.createDirectory(folderPath, { signal: abort.signal })\n\t\t\t\t\tresolve(currentUpload)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error && typeof error === 'object' && 'status' in error && error.status === 405) {\n\t\t\t\t\t\t// Directory already exists, so just write into it and ignore the error\n\t\t\t\t\t\tcurrentUpload.status = UploadStatus.FINISHED\n\t\t\t\t\t\tlogger.debug('Directory already exists, writing into it', { directory: directory.name })\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Another error happened, so abort uploading the directory\n\t\t\t\t\t\tcurrentUpload.status = UploadStatus.FAILED\n\t\t\t\t\t\treject(error)\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// Update statistics\n\t\t\t\t\tthis._notifyAll(currentUpload)\n\t\t\t\t\tthis.updateStats()\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\t// Helper for uploading directories (recursively)\n\tprivate uploadDirectory(\n\t\tdestination: string,\n\t\tdirectory: Directory,\n\t\tcallback: (nodes: Array<File|Directory>, currentPath: string) => Promise<Array<File|Directory>|false>,\n\t\t// client as parameter to cache it for performance\n\t\tclient: WebDAVClient,\n\t): PCancelable<Upload[]> {\n\t\tconst folderPath = normalize(`${destination}/${directory.name}`).replace(/\\/$/, '')\n\n\t\treturn new PCancelable(async (resolve, reject, onCancel) => {\n\t\t\tconst abort = new AbortController()\n\t\t\tonCancel(() => abort.abort())\n\n\t\t\t// Let the user handle conflicts\n\t\t\tconst selectedForUpload = await callback(directory.children, folderPath)\n\t\t\tif (selectedForUpload === false) {\n\t\t\t\treject(t('Upload has been cancelled'))\n\t\t\t\treturn\n\t\t\t} else if (selectedForUpload.length === 0 && directory.children.length > 0) {\n\t\t\t\tresolve([])\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst directories: PCancelable<Upload[]>[] = []\n\t\t\tconst uploads: PCancelable<Upload>[] = []\n\t\t\t// Setup abort controller to cancel all child requests\n\t\t\tabort.signal.addEventListener('abort', () => {\n\t\t\t\tdirectories.forEach((upload) => upload.cancel())\n\t\t\t\tuploads.forEach((upload) => upload.cancel())\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tif (directory.name) {\n\t\t\t\t\t// If not the virtual root we need to create the directory first before uploading\n\t\t\t\t\t// Make sure the promise is listed in the final result\n\t\t\t\t\tuploads.push(this.createDirectory(destination, directory, client) as PCancelable<Upload>)\n\t\t\t\t\t// Ensure the directory is created before uploading / creating children\n\t\t\t\t\tawait uploads.at(-1)\n\t\t\t\t}\n\n\t\t\t\tfor (const node of selectedForUpload) {\n\t\t\t\t\tif (node instanceof Directory) {\n\t\t\t\t\t\tdirectories.push(this.uploadDirectory(folderPath, node, callback, client))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuploads.push(this.upload(`${folderPath}/${node.name}`, node))\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst resolvedUploads = await Promise.all(uploads)\n\t\t\t\tconst resolvedDirectoryUploads = await Promise.all(directories)\n\t\t\t\tresolve([resolvedUploads, ...resolvedDirectoryUploads].flat())\n\t\t\t} catch (e) {\n\t\t\t\t// Ensure a failure cancels all other requests\n\t\t\t\tabort.abort(e)\n\t\t\t\treject(e)\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Upload a file to the given path\n\t * @param {string} destination the destination path relative to the root folder. e.g. /foo/bar.txt\n\t * @param {File|FileSystemFileEntry} fileHandle the file to upload\n\t * @param {string} root the root folder to upload to\n\t * @param retries number of retries\n\t */\n\tupload(destination: string, fileHandle: File|FileSystemFileEntry, root?: string, retries: number = 5): PCancelable<Upload> {\n\t\troot = root || this.root\n\t\tconst destinationPath = `${root.replace(/\\/$/, '')}/${destination.replace(/^\\//, '')}`\n\n\t\t// Get the encoded source url to this object for requests purposes\n\t\tconst { origin } = new URL(destinationPath)\n\t\tconst encodedDestinationFile = origin + encodePath(destinationPath.slice(origin.length))\n\n\t\tlogger.debug(`Uploading ${fileHandle.name} to ${encodedDestinationFile}`)\n\n\t\tconst promise = new PCancelable(async (resolve, reject, onCancel): Promise<Upload> => {\n\t\t\t// Handle file system entries by retrieving the file handle\n\t\t\tif (isFileSystemFileEntry(fileHandle)) {\n\t\t\t\tfileHandle = await new Promise((resolve) => (fileHandle as FileSystemFileEntry).file(resolve, reject))\n\t\t\t}\n\t\t\t// We can cast here as we handled system entries in the if above\n\t\t\tconst file = fileHandle as File\n\n\t\t\t// If manually disabled or if the file is too small\n\t\t\t// TODO: support chunk uploading in public pages\n\t\t\tconst maxChunkSize = getMaxChunksSize('size' in file ? file.size : undefined)\n\t\t\tconst disabledChunkUpload = this._isPublic\n\t\t\t\t|| maxChunkSize === 0\n\t\t\t\t|| ('size' in file && file.size < maxChunkSize)\n\n\t\t\tconst upload = new Upload(destinationPath, !disabledChunkUpload, file.size, file)\n\t\t\tthis._uploadQueue.push(upload)\n\t\t\tthis.updateStats()\n\n\t\t\t// Register cancellation caller\n\t\t\tonCancel(upload.cancel)\n\n\t\t\tif (!disabledChunkUpload) {\n\t\t\t\tlogger.debug('Initializing chunked upload', { file, upload })\n\n\t\t\t\t// Let's initialize a chunk upload\n\t\t\t\tconst tempUrl = await initChunkWorkspace(encodedDestinationFile, retries)\n\t\t\t\tconst chunksQueue: Array<Promise<void>> = []\n\n\t\t\t\t// Generate chunks array\n\t\t\t\tfor (let chunk = 0; chunk < upload.chunks; chunk++) {\n\t\t\t\t\tconst bufferStart = chunk * maxChunkSize\n\t\t\t\t\t// Don't go further than the file size\n\t\t\t\t\tconst bufferEnd = Math.min(bufferStart + maxChunkSize, upload.size)\n\t\t\t\t\t// Make it a Promise function for better memory management\n\t\t\t\t\tconst blob = () => getChunk(file, bufferStart, maxChunkSize)\n\n\t\t\t\t\t// Init request queue\n\t\t\t\t\tconst request = () => {\n\t\t\t\t\t\treturn uploadData(\n\t\t\t\t\t\t\t`${tempUrl}/${chunk + 1}`,\n\t\t\t\t\t\t\tblob,\n\t\t\t\t\t\t\tupload.signal,\n\t\t\t\t\t\t\t() => this.updateStats(),\n\t\t\t\t\t\t\tencodedDestinationFile,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...this._customHeaders,\n\t\t\t\t\t\t\t\t'X-OC-Mtime': Math.floor(file.lastModified / 1000),\n\t\t\t\t\t\t\t\t'OC-Total-Length': file.size,\n\t\t\t\t\t\t\t\t'Content-Type': 'application/octet-stream',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tretries,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t// Update upload progress on chunk completion\n\t\t\t\t\t\t\t.then(() => { upload.uploaded = upload.uploaded + maxChunkSize })\n\t\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\t\tif (error?.response?.status === 507) {\n\t\t\t\t\t\t\t\t\tlogger.error('Upload failed, not enough space on the server or quota exceeded. Cancelling the remaining chunks', { error, upload })\n\t\t\t\t\t\t\t\t\tupload.cancel()\n\t\t\t\t\t\t\t\t\tupload.status = UploadStatus.FAILED\n\t\t\t\t\t\t\t\t\tthrow error\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!isCancel(error)) {\n\t\t\t\t\t\t\t\t\tlogger.error(`Chunk ${chunk + 1} ${bufferStart} - ${bufferEnd} uploading failed`, { error, upload })\n\t\t\t\t\t\t\t\t\tupload.cancel()\n\t\t\t\t\t\t\t\t\tupload.status = UploadStatus.FAILED\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthrow error\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tchunksQueue.push(this._jobQueue.add(request))\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Once all chunks are sent, assemble the final file\n\t\t\t\t\tawait Promise.all(chunksQueue)\n\t\t\t\t\tthis.updateStats()\n\n\t\t\t\t\tupload.response = await axios.request({\n\t\t\t\t\t\tmethod: 'MOVE',\n\t\t\t\t\t\turl: `${tempUrl}/.file`,\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t...this._customHeaders,\n\t\t\t\t\t\t\t'X-OC-Mtime': Math.floor(file.lastModified / 1000),\n\t\t\t\t\t\t\t'OC-Total-Length': file.size,\n\t\t\t\t\t\t\tDestination: encodedDestinationFile,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tthis.updateStats()\n\t\t\t\t\tupload.status = UploadStatus.FINISHED\n\t\t\t\t\tlogger.debug(`Successfully uploaded ${file.name}`, { file, upload })\n\t\t\t\t\tresolve(upload)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!isCancel(error)) {\n\t\t\t\t\t\tupload.status = UploadStatus.FAILED\n\t\t\t\t\t\treject('Failed assembling the chunks together')\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupload.status = UploadStatus.FAILED\n\t\t\t\t\t\treject(t('Upload has been cancelled'))\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cleaning up temp directory\n\t\t\t\t\taxios.request({\n\t\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\t\turl: `${tempUrl}`,\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\t// Notify listeners of the upload completion\n\t\t\t\tthis._notifyAll(upload)\n\t\t\t} else {\n\t\t\t\tlogger.debug('Initializing regular upload', { file, upload })\n\n\t\t\t\t// Generating upload limit\n\t\t\t\tconst blob = await getChunk(file, 0, upload.size)\n\t\t\t\tconst request = async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tupload.response = await uploadData(\n\t\t\t\t\t\t\tencodedDestinationFile,\n\t\t\t\t\t\t\tblob,\n\t\t\t\t\t\t\tupload.signal,\n\t\t\t\t\t\t\t(event) => {\n\t\t\t\t\t\t\t\tupload.uploaded = upload.uploaded + event.bytes\n\t\t\t\t\t\t\t\tthis.updateStats()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...this._customHeaders,\n\t\t\t\t\t\t\t\t'X-OC-Mtime': Math.floor(file.lastModified / 1000),\n\t\t\t\t\t\t\t\t'Content-Type': file.type,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\t// Update progress\n\t\t\t\t\t\tupload.uploaded = upload.size\n\t\t\t\t\t\tthis.updateStats()\n\n\t\t\t\t\t\t// Resolve\n\t\t\t\t\t\tlogger.debug(`Successfully uploaded ${file.name}`, { file, upload })\n\t\t\t\t\t\tresolve(upload)\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (isCancel(error)) {\n\t\t\t\t\t\t\tupload.status = UploadStatus.FAILED\n\t\t\t\t\t\t\treject(t('Upload has been cancelled'))\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Attach response to the upload object\n\t\t\t\t\t\tif ((error as AxiosError)?.response) {\n\t\t\t\t\t\t\tupload.response = (error as AxiosError).response as AxiosResponse\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tupload.status = UploadStatus.FAILED\n\t\t\t\t\t\tlogger.error(`Failed uploading ${file.name}`, { error, file, upload })\n\t\t\t\t\t\treject('Failed uploading the file')\n\t\t\t\t\t}\n\n\t\t\t\t\t// Notify listeners of the upload completion\n\t\t\t\t\tthis._notifyAll(upload)\n\t\t\t\t}\n\t\t\t\tthis._jobQueue.add(request)\n\t\t\t\tthis.updateStats()\n\t\t\t}\n\t\t\treturn upload\n\t\t}) as PCancelable<Upload>\n\n\t\treturn promise\n\t}\n\n}\n","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"title ? null : true\"\n        :aria-label=\"title\"\n        class=\"material-design-icon cancel-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M12 2C17.5 2 22 6.5 22 12S17.5 22 12 22 2 17.5 2 12 6.5 2 12 2M12 4C10.1 4 8.4 4.6 7.1 5.7L18.3 16.9C19.3 15.5 20 13.8 20 12C20 7.6 16.4 4 12 4M16.9 18.3L5.7 7.1C4.6 8.4 4 10.1 4 12C4 16.4 7.6 20 12 20C13.9 20 15.6 19.4 16.9 18.3Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"CancelIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"title ? null : true\"\n        :aria-label=\"title\"\n        class=\"material-design-icon folder-upload-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M20,6A2,2 0 0,1 22,8V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4H10L12,6H20M10.75,13H14V17H16V13H19.25L15,8.75\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"FolderUploadIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"title ? null : true\"\n        :aria-label=\"title\"\n        class=\"material-design-icon plus-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"PlusIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"title ? null : true\"\n        :aria-label=\"title\"\n        class=\"material-design-icon upload-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"UploadIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<!--\n  - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<NcDialog :buttons=\"dialogButtons\"\n\t\t:name=\"t('Invalid filename')\"\n\t\t@close=\"$emit('close', { cancel: true })\">\n\t\t<NcNoteCard severity=\"error\">\n\t\t\t{{ getErrorText(error) }}\n\t\t\t{{ t('You can either rename the file, skip this file or cancel the whole operation.') }}\n\t\t</NcNoteCard>\n\t\t<NcTextField v-if=\"canRename\"\n\t\t\tref=\"textfield\"\n\t\t\tclass=\"invalid-filename-dialog__input\"\n\t\t\t:error=\"!isValidName\"\n\t\t\t:helper-text=\"validationError\"\n\t\t\t:label=\"t('New filename')\"\n\t\t\t:value.sync=\"newName\" />\n\t</NcDialog>\n</template>\n\n<script lang=\"ts\">\nimport type { ComponentPublicInstance, PropType } from 'vue'\n\nimport { InvalidFilenameError, InvalidFilenameErrorReason } from '@nextcloud/files'\nimport { defineComponent } from 'vue'\nimport { t } from '../utils/l10n'\nimport NcDialog from '@nextcloud/vue/dist/Components/NcDialog.js'\nimport NcTextField from '@nextcloud/vue/dist/Components/NcTextField.js'\nimport NcNoteCard from '@nextcloud/vue/dist/Components/NcNoteCard.js'\n\nexport default defineComponent({\n\tcomponents: {\n\t\tNcDialog,\n\t\tNcNoteCard,\n\t\tNcTextField,\n\t},\n\n\tprops: {\n\t\terror: {\n\t\t\ttype: InvalidFilenameError,\n\t\t\trequired: true,\n\t\t},\n\t\t/**\n\t\t * @deprecated just for legacy reasons, replace with function from @nextcloud/files in future\n\t\t */\n\t\tvalidateFilename: {\n\t\t\ttype: Function as PropType<(filename: string) => void>,\n\t\t\trequired: true,\n\t\t},\n\t},\n\n\tsetup() {\n\t\treturn {\n\t\t\tt,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tnewName: '',\n\t\t\tvalidationError: '',\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tisValidName(): boolean {\n\t\t\treturn this.validationError === ''\n\t\t},\n\n\t\tisInvalidFileType(): boolean {\n\t\t\treturn this.error.reason === InvalidFilenameErrorReason.Extension && this.error.segment.match(/^\\.\\w/) !== null\n\t\t},\n\n\t\tcanRename(): boolean {\n\t\t\treturn !this.isInvalidFileType\n\t\t},\n\n\t\tdialogButtons() {\n\t\t\tconst buttons = [\n\t\t\t\t{\n\t\t\t\t\tlabel: t('Cancel'),\n\t\t\t\t\ttype: 'error',\n\t\t\t\t\tcallback: () => {\n\t\t\t\t\t\tthis.$emit('close', { cancel: true })\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t('Skip'),\n\t\t\t\t\tcallback: () => {\n\t\t\t\t\t\tthis.$emit('close', { skip: true })\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t] as unknown[]\n\n\t\t\t// Only add the rename option if possible\n\t\t\tif (this.canRename) {\n\t\t\t\tbuttons.push({\n\t\t\t\t\tlabel: t('Rename'),\n\t\t\t\t\ttype: 'primary',\n\t\t\t\t\tdisabled: !this.isValidName,\n\t\t\t\t\tcallback: () => {\n\t\t\t\t\t\tthis.$emit('close', { rename: this.newName.trimEnd() })\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn buttons\n\t\t},\n\t},\n\twatch: {\n\t\terror: {\n\t\t\thandler() {\n\t\t\t\tthis.validationError = this.getErrorText(this.error)\n\t\t\t\tthis.newName = this.error.filename\n\t\t\t},\n\t\t\timmediate: true,\n\t\t},\n\n\t\tnewName() {\n\t\t\ttry {\n\t\t\t\tthis.validateFilename(this.newName.trimEnd())\n\t\t\t\tthis.validationError = ''\n\t\t\t} catch (error) {\n\t\t\t\tthis.validationError = this.getErrorText(error as InvalidFilenameError)\n\t\t\t} finally {\n\t\t\t\tconst textfield = (this.$refs.textfield as ComponentPublicInstance)?.$el.querySelector('input')\n\t\t\t\tif (textfield) {\n\t\t\t\t\ttextfield.setCustomValidity(this.validationError)\n\t\t\t\t\ttextfield.reportValidity()\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n\n\tmethods: {\n\t\tgetErrorText(error: InvalidFilenameError): string {\n\t\t\tswitch (error.reason) {\n\t\t\tcase InvalidFilenameErrorReason.Character:\n\t\t\t\treturn t('\"{segment}\" is not allowed inside a file or folder name.', { segment: error.segment })\n\t\t\tcase InvalidFilenameErrorReason.ReservedName:\n\t\t\t\treturn t('\"{segment}\" is a forbidden file or folder name.', { segment: error.segment })\n\t\t\tcase InvalidFilenameErrorReason.Extension:\n\t\t\t\treturn error.segment.match(/\\.\\w/)\n\t\t\t\t\t? t('\"{segment}\" is a forbidden file type.', { segment: error.segment })\n\t\t\t\t\t: t('Filenames must not end with \"{segment}\".', { segment: error.segment })\n\t\t\t}\n\t\t},\n\t},\n})\n</script>\n\n<style scoped>\n.invalid-filename-dialog__input {\n\t/* Ensure the helper text can always be shown without jumping */\n\tmin-height: calc(var(--default-clickable-area) + 4 * var(--default-font-size));\n}\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<form v-if=\"destination\"\n\t\tref=\"form\"\n\t\t:class=\"{'upload-picker--uploading': isUploading, 'upload-picker--paused': isPaused}\"\n\t\tclass=\"upload-picker\"\n\t\tdata-cy-upload-picker>\n\t\t<!-- New button -->\n\t\t<NcButton v-if=\"(noMenu || newFileMenuEntries.length === 0) && !canUploadFolders\"\n\t\t\t:disabled=\"disabled\"\n\t\t\tdata-cy-upload-picker-add\n\t\t\tdata-cy-upload-picker-menu-entry=\"upload-file\"\n\t\t\ttype=\"secondary\"\n\t\t\t@click=\"onTriggerPick()\">\n\t\t\t<template #icon>\n\t\t\t\t<IconPlus :size=\"20\" />\n\t\t\t</template>\n\t\t\t{{ buttonName }}\n\t\t</NcButton>\n\t\t<NcActions v-else\n\t\t\t:aria-label=\"buttonLabel\"\n\t\t\t:menu-name=\"buttonName\"\n\t\t\ttype=\"secondary\">\n\t\t\t<template #icon>\n\t\t\t\t<IconPlus :size=\"20\" />\n\t\t\t</template>\n\n\t\t\t<NcActionCaption :name=\"t('Upload from device')\" />\n\n\t\t\t<NcActionButton data-cy-upload-picker-add\n\t\t\t\tdata-cy-upload-picker-menu-entry=\"upload-file\"\n\t\t\t\t:close-after-click=\"true\"\n\t\t\t\t@click=\"onTriggerPick()\">\n\t\t\t\t<template #icon>\n\t\t\t\t\t<IconUpload :size=\"20\" />\n\t\t\t\t</template>\n\t\t\t\t{{ t('Upload files') }}\n\t\t\t</NcActionButton>\n\t\t\t<NcActionButton v-if=\"canUploadFolders\"\n\t\t\t\tclose-after-click\n\t\t\t\tdata-cy-upload-picker-add-folders\n\t\t\t\tdata-cy-upload-picker-menu-entry=\"upload-folder\"\n\t\t\t\t@click=\"onTriggerPick(true)\">\n\t\t\t\t<template #icon>\n\t\t\t\t\t<IconFolderUpload style=\"color: var(--color-primary-element)\" :size=\"20\" />\n\t\t\t\t</template>\n\t\t\t\t{{ t('Upload folders') }}\n\t\t\t</NcActionButton>\n\n\t\t\t<!-- App defined upload actions -->\n\t\t\t<template v-if=\"!noMenu\">\n\t\t\t\t<NcActionButton v-for=\"entry in menuEntriesUpload\"\n\t\t\t\t\t:key=\"entry.id\"\n\t\t\t\t\t:icon=\"entry.iconClass\"\n\t\t\t\t\t:close-after-click=\"true\"\n\t\t\t\t\t:data-cy-upload-picker-menu-entry=\"entry.id\"\n\t\t\t\t\tclass=\"upload-picker__menu-entry\"\n\t\t\t\t\t@click=\"onClick(entry)\">\n\t\t\t\t\t<template v-if=\"entry.iconSvgInline\" #icon>\n\t\t\t\t\t\t<NcIconSvgWrapper :svg=\"entry.iconSvgInline\" />\n\t\t\t\t\t</template>\n\t\t\t\t\t{{ entry.displayName }}\n\t\t\t\t</NcActionButton>\n\t\t\t</template>\n\n\t\t\t<!-- Custom new file entries -->\n\t\t\t<template v-if=\"!noMenu && menuEntriesNew.length > 0\">\n\t\t\t\t<NcActionSeparator />\n\t\t\t\t<NcActionCaption :name=\"t('Create new')\" />\n\t\t\t\t<NcActionButton v-for=\"entry in menuEntriesNew\"\n\t\t\t\t\t:key=\"entry.id\"\n\t\t\t\t\t:icon=\"entry.iconClass\"\n\t\t\t\t\t:close-after-click=\"true\"\n\t\t\t\t\t:data-cy-upload-picker-menu-entry=\"entry.id\"\n\t\t\t\t\tclass=\"upload-picker__menu-entry\"\n\t\t\t\t\t@click=\"onClick(entry)\">\n\t\t\t\t\t<template v-if=\"entry.iconSvgInline\" #icon>\n\t\t\t\t\t\t<NcIconSvgWrapper :svg=\"entry.iconSvgInline\" />\n\t\t\t\t\t</template>\n\t\t\t\t\t{{ entry.displayName }}\n\t\t\t\t</NcActionButton>\n\t\t\t</template>\n\n\t\t\t<!-- other file entries -->\n\t\t\t<template v-if=\"!noMenu && menuEntriesOther.length > 0\">\n\t\t\t\t<NcActionSeparator />\n\t\t\t\t<NcActionButton v-for=\"entry in menuEntriesOther\"\n\t\t\t\t\t:key=\"entry.id\"\n\t\t\t\t\t:icon=\"entry.iconClass\"\n\t\t\t\t\t:close-after-click=\"true\"\n\t\t\t\t\t:data-cy-upload-picker-menu-entry=\"entry.id\"\n\t\t\t\t\tclass=\"upload-picker__menu-entry\"\n\t\t\t\t\t@click=\"onClick(entry)\">\n\t\t\t\t\t<template v-if=\"entry.iconSvgInline\" #icon>\n\t\t\t\t\t\t<NcIconSvgWrapper :svg=\"entry.iconSvgInline\" />\n\t\t\t\t\t</template>\n\t\t\t\t\t{{ entry.displayName }}\n\t\t\t\t</NcActionButton>\n\t\t\t</template>\n\t\t</NcActions>\n\n\t\t<!-- Progressbar and status -->\n\t\t<div v-show=\"isUploading\" class=\"upload-picker__progress\">\n\t\t\t<NcProgressBar :aria-label=\"t('Upload progress')\"\n\t\t\t\t:aria-describedby=\"progressTimeId\"\n\t\t\t\t:error=\"hasFailure\"\n\t\t\t\t:value=\"progress\"\n\t\t\t\tsize=\"medium\" />\n\t\t\t<p :id=\"progressTimeId\">\n\t\t\t\t{{ timeLeft }}\n\t\t\t</p>\n\t\t</div>\n\n\t\t<!-- Cancel upload button -->\n\t\t<NcButton v-if=\"isUploading\"\n\t\t\tclass=\"upload-picker__cancel\"\n\t\t\ttype=\"tertiary\"\n\t\t\t:aria-label=\"t('Cancel uploads')\"\n\t\t\tdata-cy-upload-picker-cancel\n\t\t\t@click=\"onCancel\">\n\t\t\t<template #icon>\n\t\t\t\t<IconCancel :size=\"20\" />\n\t\t\t</template>\n\t\t</NcButton>\n\n\t\t<!-- Hidden files picker input -->\n\t\t<input ref=\"input\"\n\t\t\t:accept=\"accept?.join?.(', ')\"\n\t\t\t:multiple=\"multiple\"\n\t\t\tclass=\"hidden-visually\"\n\t\t\tdata-cy-upload-picker-input\n\t\t\ttype=\"file\"\n\t\t\t@change=\"onPick\">\n\t</form>\n</template>\n\n<script lang=\"ts\">\nimport type { Entry, Node } from '@nextcloud/files'\nimport type { PropType } from 'vue'\nimport type { Upload } from '../upload.ts'\nimport type { Directory } from '../utils/fileTree'\n\nimport { showInfo, showWarning, spawnDialog } from '@nextcloud/dialogs'\nimport { Folder, InvalidFilenameError, InvalidFilenameErrorReason, NewMenuEntryCategory, getNewFileMenuEntries, getUniqueName, validateFilename } from '@nextcloud/files'\nimport { basename } from '@nextcloud/paths'\nimport makeEta from 'simple-eta'\nimport Vue from 'vue'\n\nimport NcActionButton from '@nextcloud/vue/dist/Components/NcActionButton.js'\nimport NcActionCaption from '@nextcloud/vue/dist/Components/NcActionCaption.js'\nimport NcActionSeparator from '@nextcloud/vue/dist/Components/NcActionSeparator.js'\nimport NcActions from '@nextcloud/vue/dist/Components/NcActions.js'\nimport NcButton from '@nextcloud/vue/dist/Components/NcButton.js'\nimport NcIconSvgWrapper from '@nextcloud/vue/dist/Components/NcIconSvgWrapper.js'\nimport NcProgressBar from '@nextcloud/vue/dist/Components/NcProgressBar.js'\n\nimport IconCancel from 'vue-material-design-icons/Cancel.vue'\nimport IconFolderUpload from 'vue-material-design-icons/FolderUpload.vue'\nimport IconPlus from 'vue-material-design-icons/Plus.vue'\nimport IconUpload from 'vue-material-design-icons/Upload.vue'\n\nimport { getUploader, openConflictPicker, getConflicts } from '../index.ts'\nimport { Status } from '../uploader.ts'\nimport { Status as UploadStatus } from '../upload.ts'\nimport { t } from '../utils/l10n.ts'\nimport logger from '../utils/logger.ts'\nimport InvalidFilenameDialog from './InvalidFilenameDialog.vue'\n\nexport default Vue.extend({\n\tname: 'UploadPicker',\n\n\tcomponents: {\n\t\tIconCancel,\n\t\tIconFolderUpload,\n\t\tIconPlus,\n\t\tIconUpload,\n\t\tNcActionButton,\n\t\tNcActionCaption,\n\t\tNcActionSeparator,\n\t\tNcActions,\n\t\tNcButton,\n\t\tNcIconSvgWrapper,\n\t\tNcProgressBar,\n\t},\n\n\tprops: {\n\t\taccept: {\n\t\t\ttype: Array as PropType<string[]>,\n\t\t\tdefault: null,\n\t\t},\n\t\tdisabled: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tmultiple: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\n\t\t/**\n\t\t * Allow to disable the \"new\"-menu for this UploadPicker instance\n\t\t * @default false\n\t\t */\n\t\tnoMenu: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\n\t\tdestination: {\n\t\t\ttype: Folder,\n\t\t\tdefault: undefined,\n\t\t},\n\t\tallowFolders: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\t/**\n\t\t * List of file present in the destination folder\n\t\t * It is also possible to provide a function that takes a relative path to the current directory and returns the content of it\n\t\t * Note: If a function is passed it should return the current base directory when no path or an empty is passed\n\t\t */\n\t\tcontent: {\n\t\t\ttype: [Array, Function] as PropType<Node[]|((relativePath?: string) => Node[]|PromiseLike<Node[]>)>,\n\t\t\tdefault: () => [],\n\t\t},\n\n\t\t/**\n\t\t * Overwrite forbidden characters (by default the capabilities of the server are used)\n\t\t * @deprecated Deprecated and will be removed in the next major version\n\t\t */\n\t\tforbiddenCharacters: {\n\t\t\ttype: Array as PropType<string[]>,\n\t\t\tdefault: () => [],\n\t\t},\n\t},\n\n\tsetup() {\n\t\treturn {\n\t\t\tt,\n\n\t\t\t// non reactive data / properties\n\t\t\tprogressTimeId: `nc-uploader-progress-${Math.random().toString(36).slice(7)}`,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\teta: null,\n\t\t\ttimeLeft: '',\n\n\t\t\tnewFileMenuEntries: [] as Entry[],\n\t\t\tuploadManager: getUploader(),\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tmenuEntriesUpload() {\n\t\t\treturn this.newFileMenuEntries.filter((entry) => entry.category === NewMenuEntryCategory.UploadFromDevice)\n\t\t},\n\n\t\tmenuEntriesNew() {\n\t\t\treturn this.newFileMenuEntries.filter((entry) => entry.category === NewMenuEntryCategory.CreateNew)\n\t\t},\n\n\t\tmenuEntriesOther() {\n\t\t\treturn this.newFileMenuEntries.filter((entry) => entry.category === NewMenuEntryCategory.Other)\n\t\t},\n\t\t/**\n\t\t * Check whether the current browser supports uploading directories\n\t\t * Hint: This does not check if the current connection supports this, as some browsers require a secure context!\n\t\t */\n\t\tcanUploadFolders() {\n\t\t\treturn this.allowFolders && 'webkitdirectory' in document.createElement('input')\n\t\t},\n\n\t\ttotalQueueSize() {\n\t\t\treturn this.uploadManager.info?.size || 0\n\t\t},\n\n\t\tuploadedQueueSize() {\n\t\t\treturn this.uploadManager.info?.progress || 0\n\t\t},\n\n\t\tprogress() {\n\t\t\treturn Math.round(this.uploadedQueueSize / this.totalQueueSize * 100) || 0\n\t\t},\n\n\t\tqueue() {\n\t\t\treturn this.uploadManager.queue\n\t\t},\n\n\t\thasFailure() {\n\t\t\treturn this.queue?.filter((upload: Upload) => upload.status === UploadStatus.FAILED).length !== 0\n\t\t},\n\t\tisUploading() {\n\t\t\treturn this.queue?.length > 0\n\t\t},\n\t\tisAssembling() {\n\t\t\treturn this.queue?.filter((upload: Upload) => upload.status === UploadStatus.ASSEMBLING).length !== 0\n\t\t},\n\t\tisPaused() {\n\t\t\treturn this.uploadManager.info?.status === Status.PAUSED\n\t\t},\n\n\t\tbuttonLabel() {\n\t\t\treturn this.noMenu ? t('Upload') : t('New')\n\t\t},\n\n\t\t// Hide the button text if we're uploading\n\t\tbuttonName() {\n\t\t\tif (this.isUploading) {\n\t\t\t\treturn undefined\n\t\t\t}\n\t\t\treturn this.buttonLabel\n\t\t},\n\t},\n\n\twatch: {\n\t\tallowFolders: {\n\t\t\timmediate: true,\n\t\t\thandler() {\n\t\t\t\tif (typeof this.content !== 'function' && this.allowFolders) {\n\t\t\t\t\tlogger.error('[UploadPicker] Setting `allowFolders` is only allowed if `content` is a function')\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\n\t\tdestination(destination) {\n\t\t\tthis.setDestination(destination)\n\t\t},\n\n\t\ttotalQueueSize(size) {\n\t\t\tthis.eta = makeEta({ min: 0, max: size })\n\t\t\tthis.updateStatus()\n\t\t},\n\n\t\tuploadedQueueSize(size) {\n\t\t\tthis.eta?.report?.(size)\n\t\t\tthis.updateStatus()\n\t\t},\n\n\t\tisPaused(isPaused) {\n\t\t\tif (isPaused) {\n\t\t\t\tthis.$emit('paused', this.queue)\n\t\t\t} else {\n\t\t\t\tthis.$emit('resumed', this.queue)\n\t\t\t}\n\t\t},\n\t},\n\n\tbeforeMount() {\n\t\t// Prevent init with wrong destination\n\t\tif (this.destination) {\n\t\t\tthis.setDestination(this.destination)\n\t\t}\n\n\t\t// Update data on upload progress\n\t\tthis.uploadManager.addNotifier(this.onUploadCompletion)\n\n\t\tlogger.debug('UploadPicker initialised')\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * Handle clicking a new-menu entry\n\t\t * @param entry The entry that was clicked\n\t\t */\n\t\tasync onClick(entry: Entry) {\n\t\t\tentry.handler(\n\t\t\t\tthis.destination!,\n\t\t\t\tawait this.getContent().catch(() => []),\n\t\t\t)\n\t\t},\n\n\t\t/**\n\t\t * Trigger file picker\n\t\t * @param uploadFolders Upload folders\n\t\t */\n\t\tonTriggerPick(uploadFolders = false) {\n\t\t\tconst input = this.$refs.input as HTMLInputElement\n\t\t\t// Setup directory picking if enabled\n\t\t\tif (this.canUploadFolders) {\n\t\t\t\tinput.webkitdirectory = uploadFolders\n\t\t\t}\n\t\t\t// Trigger click on the input to open the file picker\n\t\t\tthis.$nextTick(() => input.click())\n\t\t},\n\n\t\t/**\n\t\t * Helper for backwards compatibility that queries the content of the current directory\n\t\t * @param path The current path\n\t\t */\n\t\tasync getContent(path?: string) {\n\t\t\treturn Array.isArray(this.content) ? this.content : await this.content(path)\n\t\t},\n\n\t\t/**\n\t\t * Show a dialog to let the user decide how to proceed with invalid filenames.\n\t\t * The returned promise resolves to false if the file should be skipped, and resolves to a string if it should be renamed.\n\t\t * The promise rejects when the user want to abort the operation.\n\t\t *\n\t\t * @param error the validation error\n\t\t */\n\t\tshowInvalidFileNameDialog(error: InvalidFilenameError): Promise<string | false> {\n\t\t\tconst { promise, reject, resolve } = Promise.withResolvers<string | false>()\n\t\t\tspawnDialog(\n\t\t\t\tInvalidFilenameDialog,\n\t\t\t\t{\n\t\t\t\t\terror,\n\t\t\t\t\tvalidateFilename: this.validateFilename.bind(this),\n\t\t\t\t},\n\t\t\t\t(...rest) => {\n\t\t\t\t\tconst [{ skip, rename }] = rest as [{ cancel?: true, skip?: true, rename?: string }]\n\t\t\t\t\tif (skip) {\n\t\t\t\t\t\tresolve(false)\n\t\t\t\t\t} else if (rename) {\n\t\t\t\t\t\tresolve(rename)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t)\n\t\t\treturn promise\n\t\t},\n\n\t\t/**\n\t\t * Wrapper to allow overwriting forbidden characters\n\t\t * Remove with next major\n\t\t * @param filename name to validate\n\t\t */\n\t\tvalidateFilename(filename: string) {\n\t\t\t// just for legacy reasons, remove with next major\n\t\t\tif (this.forbiddenCharacters.length > 0) {\n\t\t\t\tfor (const c of this.forbiddenCharacters) {\n\t\t\t\t\tif (filename.includes(c)) {\n\t\t\t\t\t\tthrow new InvalidFilenameError({\n\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\treason: InvalidFilenameErrorReason.Character,\n\t\t\t\t\t\t\tsegment: c,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalidateFilename(filename)\n\t\t\t}\n\t\t},\n\n\t\tasync handleConflicts(nodes: Array<File|Directory>, path: string): Promise<Array<File|Directory>|false> {\n\t\t\ttry {\n\t\t\t\tconst content = await this.getContent(path).catch(() => [])\n\t\t\t\tconst conflicts = getConflicts(nodes, content)\n\n\t\t\t\t// First handle conflicts as this might already remove invalid files\n\t\t\t\tif (conflicts.length > 0) {\n\t\t\t\t\tconst { selected, renamed } = await openConflictPicker(path, conflicts, content, { recursive: true })\n\t\t\t\t\tnodes = [...selected, ...renamed]\n\t\t\t\t}\n\n\t\t\t\t// We need to check all files for invalid characters\n\t\t\t\tconst filesToUpload: Array<File|Directory> = []\n\t\t\t\tfor (const file of nodes) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.validateFilename(file.name)\n\t\t\t\t\t\t// No invalid name used on this file, so just continue\n\t\t\t\t\t\tfilesToUpload.push(file)\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// do not handle other errors\n\t\t\t\t\t\tif (!(error instanceof InvalidFilenameError)) {\n\t\t\t\t\t\t\tlogger.error(`Unexpected error while validating ${file.name}`, { error })\n\t\t\t\t\t\t\tthrow error\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Handle invalid path\n\t\t\t\t\t\tlet newName = await this.showInvalidFileNameDialog(error)\n\t\t\t\t\t\tif (newName !== false) {\n\t\t\t\t\t\t\t// create a new valid path name\n\t\t\t\t\t\t\tnewName = getUniqueName(newName, nodes.map((node) => node.name))\n\t\t\t\t\t\t\tObject.defineProperty(file, 'name', { value: newName })\n\t\t\t\t\t\t\tfilesToUpload.push(file)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (filesToUpload.length === 0 && nodes.length > 0) {\n\t\t\t\t\tconst folder = basename(path)\n\t\t\t\t\tshowInfo(folder\n\t\t\t\t\t\t? t('Upload of \"{folder}\" has been skipped', { folder })\n\t\t\t\t\t\t: t('Upload has been skipped'),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\treturn filesToUpload\n\t\t\t} catch (error) {\n\t\t\t\tlogger.debug('Upload has been cancelled', { error })\n\t\t\t\tshowWarning(t('Upload has been cancelled'))\n\t\t\t\treturn false\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Start uploading\n\t\t */\n\t\tonPick() {\n\t\t\tconst input = this.$refs.input as HTMLInputElement\n\t\t\tconst files = input.files ? Array.from(input.files) : []\n\n\t\t\tthis.uploadManager\n\t\t\t\t.batchUpload('', files, this.handleConflicts)\n\t\t\t\t.catch((error) => logger.debug('Error while uploading', { error }))\n\t\t\t\t.finally(() => this.resetForm())\n\t\t},\n\n\t\tresetForm() {\n\t\t\tconst form = this.$refs.form as HTMLFormElement\n\t\t\tform?.reset()\n\t\t},\n\n\t\t/**\n\t\t * Cancel ongoing queue\n\t\t */\n\t\tonCancel() {\n\t\t\tthis.uploadManager.queue.forEach(upload => {\n\t\t\t\tupload.cancel()\n\t\t\t})\n\t\t\tthis.resetForm()\n\t\t},\n\n\t\tupdateStatus() {\n\t\t\tif (this.isPaused) {\n\t\t\t\tthis.timeLeft = t('paused')\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst estimate = Math.round(this.eta!.estimate())\n\n\t\t\tif (estimate === Infinity) {\n\t\t\t\tthis.timeLeft = t('estimating time left')\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (estimate < 10) {\n\t\t\t\tthis.timeLeft = t('a few seconds left')\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (estimate > 60) {\n\t\t\t\tconst date = new Date(0)\n\t\t\t\tdate.setSeconds(estimate)\n\t\t\t\tconst time = date.toISOString().slice(11, 11 + 8)\n\t\t\t\tthis.timeLeft = t('{time} left', { time }) // TRANSLATORS time has the format 00:00:00\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.timeLeft = t('{seconds} seconds left', { seconds: estimate })\n\t\t},\n\n\t\tsetDestination(destination: Folder) {\n\t\t\tif (!this.destination) {\n\t\t\t\tlogger.debug('Invalid destination')\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.uploadManager.destination = destination\n\n\t\t\t// If the destination change, we need to refresh the menu\n\t\t\tthis.newFileMenuEntries = getNewFileMenuEntries(destination)\n\t\t},\n\n\t\tonUploadCompletion(upload: Upload) {\n\t\t\tif (upload.status === UploadStatus.FAILED) {\n\t\t\t\tthis.$emit('failed', upload)\n\t\t\t} else {\n\t\t\t\tthis.$emit('uploaded', upload)\n\t\t\t}\n\t\t},\n\t},\n})\n</script>\n\n<style lang=\"scss\" scoped>\n$progress-width: 200px;\n\n.upload-picker {\n\tdisplay: inline-flex;\n\talign-items: center;\n\theight: var(--default-clickable-area);\n\n\t&__progress {\n\t\twidth: $progress-width;\n\t\t// Animate show/hide\n\t\tmax-width: 0;\n\t\ttransition: max-width var(--animation-quick) ease-in-out;\n\n\t\t// Align progress/text separation with the middle\n\t\tmargin-top: 8px;\n\n\t\tp {\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t}\n\n\t&--uploading &__progress {\n\t\tmax-width: $progress-width;\n\n\t\t// Visually more pleasing\n\t\tmargin-right: 20px;\n\t\tmargin-left: 8px;\n\t}\n\n\t&--paused &__progress {\n\t\tanimation: breathing 3s ease-out infinite normal;\n\t}\n}\n\n@keyframes breathing {\n\t0% {\n\t\topacity: .5;\n\t}\n\t25% {\n\t\topacity: 1;\n\t}\n\t60% {\n\t\topacity: .5;\n\t}\n\t100% {\n\t\topacity: .5;\n\t}\n}\n\n</style>\n","/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { Node } from '@nextcloud/files'\nimport type { AsyncComponent } from 'vue'\n\nimport { isPublicShare } from '@nextcloud/sharing/public'\nimport Vue, { defineAsyncComponent } from 'vue'\nimport { Uploader } from './uploader'\n\nimport UploadPicker from './components/UploadPicker.vue'\n\nexport type { IDirectory, Directory } from './utils/fileTree'\nexport { Upload, Status as UploadStatus } from './upload'\nexport { Uploader, Status as UploaderStatus } from './uploader'\n\nexport type ConflictResolutionResult<T extends File|FileSystemEntry|Node> = {\n\tselected: T[],\n\trenamed: T[],\n}\n/**\n * Get the global Uploader instance.\n *\n * Note: If you need a local uploader you can just create a new instance,\n * this global instance will be shared with other apps.\n *\n * @param isPublic Set to true to use public upload endpoint (by default it is auto detected)\n * @param forceRecreate Force a new uploader instance - main purpose is for testing\n */\nexport function getUploader(isPublic: boolean = isPublicShare(), forceRecreate = false): Uploader {\n\tif (forceRecreate || window._nc_uploader === undefined) {\n\t\twindow._nc_uploader = new Uploader(isPublic)\n\t}\n\n\treturn window._nc_uploader\n}\n\n/**\n * Upload a file\n * This will init an Uploader instance if none exists.\n * You will be able to retrieve it with `getUploader`\n *\n * @param {string} destinationPath the destination path\n * @param {File} file the file to upload\n * @return {Uploader} the uploader instance\n */\nexport function upload(destinationPath: string, file: File): Uploader {\n\t// Init uploader and start uploading\n\tconst uploader = getUploader()\n\tuploader.upload(destinationPath, file)\n\n\treturn uploader\n}\n\nexport interface ConflictPickerOptions {\n\t/**\n\t * When this is set to true a hint is shown that conflicts in directories are handles recursivly\n\t * You still need to call this function for each directory separatly.\n\t */\n\trecursive?: boolean\n}\n\n/**\n * Open the conflict resolver\n * @param {string} dirname the directory name\n * @param {(File|Node)[]} conflicts the incoming files\n * @param {Node[]} content all the existing files in the directory\n * @param {ConflictPickerOptions} options Optional settings for the conflict picker\n * @return {Promise<ConflictResolutionResult>} the selected and renamed files\n */\nexport async function openConflictPicker<T extends File|FileSystemEntry|Node>(\n\tdirname: string | undefined,\n\tconflicts: T[],\n\tcontent: Node[],\n\toptions?: ConflictPickerOptions,\n): Promise<ConflictResolutionResult<T>> {\n\tconst ConflictPicker = defineAsyncComponent(() => import('./components/ConflictPicker.vue')) as AsyncComponent\n\treturn new Promise((resolve, reject) => {\n\t\tconst picker = new Vue({\n\t\t\tname: 'ConflictPickerRoot',\n\t\t\trender: (h) => h(ConflictPicker, {\n\t\t\t\tprops: {\n\t\t\t\t\tdirname,\n\t\t\t\t\tconflicts,\n\t\t\t\t\tcontent,\n\t\t\t\t\trecursiveUpload: options?.recursive === true,\n\t\t\t\t},\n\t\t\t\ton: {\n\t\t\t\t\tsubmit(results: ConflictResolutionResult<T>) {\n\t\t\t\t\t\t// Return the results\n\t\t\t\t\t\tresolve(results)\n\n\t\t\t\t\t\t// Destroy the component\n\t\t\t\t\t\tpicker.$destroy()\n\t\t\t\t\t\tpicker.$el?.parentNode?.removeChild(picker.$el)\n\t\t\t\t\t},\n\t\t\t\t\tcancel(error?: Error) {\n\t\t\t\t\t\t// Reject the promise\n\t\t\t\t\t\treject(error ?? new Error('Canceled'))\n\n\t\t\t\t\t\t// Destroy the component\n\t\t\t\t\t\tpicker.$destroy()\n\t\t\t\t\t\tpicker.$el?.parentNode?.removeChild(picker.$el)\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t})\n\n\t\t// Mount the component\n\t\tpicker.$mount()\n\t\tdocument.body.appendChild(picker.$el)\n\t})\n}\n\n/**\n * Check if there is a conflict between two sets of files\n * @param {Array<File|FileSystemEntry|Node>} files the incoming files\n * @param {Node[]} content all the existing files in the directory\n * @return {boolean} true if there is a conflict\n */\nexport function hasConflict(files: (File|FileSystemEntry|Node)[], content: Node[]): boolean {\n\treturn getConflicts(files, content).length > 0\n}\n\n/**\n * Get the conflicts between two sets of files\n * @param {Array<File|FileSystemEntry|Node>} files the incoming files\n * @param {Node[]} content all the existing files in the directory\n * @return {boolean} true if there is a conflict\n */\nexport function getConflicts<T extends File|FileSystemEntry|Node>(files: T[], content: Node[]): T[] {\n\tconst contentNames = content.map((node: Node) => node.basename)\n\tconst conflicts = files.filter((node: File|FileSystemEntry|Node) => {\n\t\tconst name = 'basename' in node ? node.basename : node.name\n\t\treturn contentNames.indexOf(name) !== -1\n\t})\n\n\treturn conflicts\n}\n\n/** UploadPicker vue component */\nexport { UploadPicker }\n"],"names":["uploadData","Status","upload","files","UploadStatus","resolve","_sfc_main"],"mappings":"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","x_google_ignoreList":[8,9,10,11]}