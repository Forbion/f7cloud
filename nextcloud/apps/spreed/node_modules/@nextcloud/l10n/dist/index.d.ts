/// <reference types="@nextcloud/typings" />

/**
 * Returns user's locale in canonical form
 * E.g. `en-US` instead of `en_US`
 */
export declare function getCanonicalLocale(): string;

/**
 * Get a list of day names (full names)
 *
 * @return {string[]}
 */
export declare function getDayNames(): string[];

/**
 * Get a list of day names (minified names)
 *
 * @return {string[]}
 */
export declare function getDayNamesMin(): string[];

/**
 * Get a list of day names (short names)
 *
 * @return {string[]}
 */
export declare function getDayNamesShort(): string[];

/**
 * Get the first day of the week
 *
 * @return {number}
 */
export declare function getFirstDay(): number;

/**
 * Returns the user's language
 */
export declare function getLanguage(): string;

/**
 * Returns the user's locale
 */
export declare function getLocale(): string;

/**
 * Get a list of month names (full names)
 *
 * @return {string[]}
 */
export declare function getMonthNames(): string[];

/**
 * Get a list of month names (short names)
 *
 * @return {string[]}
 */
export declare function getMonthNamesShort(): string[];

/**
 * Get array index of translations for a plural form
 *
 *
 * @param {number} number the number of elements
 * @return {number} 0 for the singular form(, 1 for the first plural form, ...)
 */
export declare function getPlural(number: number): 1 | 0 | 2 | 4 | 3 | 5;

/**
 * Check whether the current, or a given, language is read right-to-left
 *
 * @param language Language code to check, defaults to current language
 */
export declare function isRTL(language?: string): boolean;

/**
 * Load an app's translation bundle if not loaded already.
 *
 * @param {string} appName name of the app
 * @param {Function} callback callback to be called when
 * the translations are loaded
 * @return {Promise} promise
 */
export declare function loadTranslations(appName: string, callback: (...args: []) => unknown): Promise<unknown>;

/**
 * Register an app's translation bundle.
 *
 * @param {string} appName name of the app
 * @param {Record<string, string>} bundle translation bundle
 */
export declare function register(appName: string, bundle: Translations): void;

/**
 * Translate a string
 *
 * @param {string} app the id of the app for which to translate the string
 * @param {string} text the string to translate
 * @param {object} vars map of placeholder key to value
 * @param {number} number to replace %n with
 * @param {object} [options] options object
 * @param {boolean} options.escape enable/disable auto escape of placeholders (by default enabled)
 * @param {boolean} options.sanitize enable/disable sanitization (by default enabled)
 *
 * @return {string}
 */
declare function translate(app: string, text: string, vars?: TranslationVariables, number?: number, options?: TranslationOptions): string;
export { translate as t }
export { translate }

/**
 * Translate a string containing an object which possibly requires a plural form
 *
 * @param {string} app the id of the app for which to translate the string
 * @param {string} textSingular the string to translate for exactly one object
 * @param {string} textPlural the string to translate for n objects
 * @param {number} number number to determine whether to use singular or plural
 * @param {object} vars of placeholder key to value
 * @param {object} options options object
 */
declare function translatePlural(app: string, textSingular: string, textPlural: string, number: number, vars?: Record<string, string | number>, options?: TranslationOptions): string;
export { translatePlural as n }
export { translatePlural }

/** @notExported */
declare interface TranslationOptions {
    /** enable/disable auto escape of placeholders (by default enabled) */
    escape?: boolean;
    /** enable/disable sanitization (by default enabled) */
    sanitize?: boolean;
}

/**
 * Translation bundle
 *
 * @example For German translation
 * ```json
 {
 "some": "einige",
 "_%n tree_::_%n trees_": [
 "%n Baum",
 "%n BÃ¤ume"
 ]
 }
 ```
 */
export declare type Translations = Record<string, string | string[] | undefined>;

/** @notExported */
declare interface TranslationVariableReplacementObject<T> {
    /** The value to use for the replacement */
    value: T;
    /** Overwrite the `escape` option just for this replacement */
    escape: boolean;
}

/** @notExported */
declare type TranslationVariables = Record<string, string | number | TranslationVariableReplacementObject<string | number>>;

/**
 * Unregister all translations of an app
 *
 * @param appName name of the app
 * @since 2.1.0
 */
export declare function unregister(appName: string): void;

export { }
