"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const GetText = require("node-gettext");
const locale = require("./chunks/locale-Bv-0Akth.cjs");
require("@nextcloud/router");
require("dompurify");
require("escape-html");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const GetText__default = /* @__PURE__ */ _interopDefault(GetText);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class GettextBuilder {
  constructor() {
    __publicField(this, "locale");
    __publicField(this, "translations", {});
    __publicField(this, "debug", false);
  }
  setLanguage(language) {
    this.locale = language;
    return this;
  }
  /** Try to detect locale from context with `en` as fallback value */
  detectLocale() {
    return this.setLanguage(locale.getLanguage().replace("-", "_"));
  }
  addTranslation(language, data) {
    this.translations[language] = data;
    return this;
  }
  enableDebugMode() {
    this.debug = true;
    return this;
  }
  build() {
    return new GettextWrapper(this.locale || "en", this.translations, this.debug);
  }
}
class GettextWrapper {
  constructor(locale2, data, debug) {
    __publicField(this, "gt");
    this.gt = new GetText__default.default({
      debug,
      sourceLocale: "en"
    });
    for (const key in data) {
      this.gt.addTranslations(key, "messages", data[key]);
    }
    this.gt.setLocale(locale2);
  }
  subtitudePlaceholders(translated, vars) {
    return translated.replace(/{([^{}]*)}/g, (a, b) => {
      const r = vars[b];
      if (typeof r === "string" || typeof r === "number") {
        return r.toString();
      } else {
        return a;
      }
    });
  }
  /**
   * Get translated string (singular form), optionally with placeholders
   *
   * @param original original string to translate
   * @param placeholders map of placeholder key to value
   */
  gettext(original, placeholders = {}) {
    return this.subtitudePlaceholders(
      this.gt.gettext(original),
      placeholders
    );
  }
  /**
   * Get translated string with plural forms
   *
   * @param singular Singular text form
   * @param plural Plural text form to be used if `count` requires it
   * @param count The number to insert into the text
   * @param placeholders optional map of placeholder key to value
   */
  ngettext(singular, plural, count, placeholders = {}) {
    return this.subtitudePlaceholders(
      this.gt.ngettext(singular, plural, count).replace(/%n/g, count.toString()),
      placeholders
    );
  }
}
function getGettextBuilder() {
  return new GettextBuilder();
}
exports.getGettextBuilder = getGettextBuilder;
