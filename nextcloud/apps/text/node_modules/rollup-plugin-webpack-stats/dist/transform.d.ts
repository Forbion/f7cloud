import type { OutputAsset, OutputBundle, OutputChunk, RenderedModule } from 'rollup';
import type { ExcludeFilepathOption } from './utils';
export type WebpackStatsFilteredAsset = {
    name: string;
    size?: number;
};
export interface WebpackStatsFilteredChunk {
    id: number | string;
    entry: boolean;
    initial: boolean;
    files?: Array<string>;
    names?: Array<string>;
}
export interface WebpackStatsFilteredModule {
    name: string;
    size?: number;
    chunks: Array<string | number>;
}
export interface WebpackStatsFilteredConcatenatedModule {
    name: string;
    size?: number;
}
export interface WebpackStatsFilteredRootModule extends WebpackStatsFilteredModule {
    modules?: Array<WebpackStatsFilteredConcatenatedModule>;
}
export interface WebpackStatsFiltered {
    builtAt: number;
    hash?: string;
    assets: Array<WebpackStatsFilteredAsset>;
    chunks: Array<WebpackStatsFilteredChunk>;
    modules: Array<WebpackStatsFilteredRootModule>;
}
type AssetSource = OutputChunk | OutputAsset;
type ChunkSource = OutputChunk;
type ModuleSource = {
    fileName: string;
} & RenderedModule;
/**
 * Store transformed sources
 */
declare class TransformSources {
    constructor();
    entries: Record<string, unknown>;
    push(id: string, source: AssetSource | ChunkSource | ModuleSource): void;
    /**
     * Get asset source
     */
    getByAsset: (asset: WebpackStatsFilteredAsset) => AssetSource;
    /**
     * Get chunk source
     */
    getByChunk: (chunk: WebpackStatsFilteredChunk) => ChunkSource;
    /**
     * Get module source
     */
    getByModule: (module: WebpackStatsFilteredModule) => ModuleSource;
}
export type TransformCallback = (stats: WebpackStatsFiltered, sources: TransformSources, bundle: OutputBundle) => WebpackStatsFiltered;
export type BundleTransformOptions = {
    /**
     * Extract module original size or rendered size
     * default: false
     */
    moduleOriginalSize?: boolean;
    /**
     * Exclude matching assets
     */
    excludeAssets?: ExcludeFilepathOption;
    /**
     * Exclude matching modules
     */
    excludeModules?: ExcludeFilepathOption;
    /**
     * Callback function to access and mutate the resulting stats after the transformation
     */
    transform?: TransformCallback;
};
export declare const bundleToWebpackStats: (bundle: OutputBundle, pluginOptions?: BundleTransformOptions) => WebpackStatsFiltered;
export {};
