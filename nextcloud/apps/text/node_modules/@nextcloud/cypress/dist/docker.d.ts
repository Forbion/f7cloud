/**
 * @copyright Copyright (c) 2022 John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @author John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import type { Container } from 'dockerode';
import Docker from 'dockerode';
export declare const docker: Docker;
/**
 * Get the container name that is currently created and/or used by dockerode
 */
export declare const getContainerName: () => string;
/**
 * Get the current container used
 * Throws if not found
 */
export declare const getContainer: () => Container;
interface StartOptions {
    /**
     * Force recreate the container even if an old one is found
     * @default false
     */
    forceRecreate?: boolean;
    /**
     * Additional mounts to create on the container
     * You can pass a mapping from server path (relative to Nextcloud root) to your local file system
     * @example ```js
     * { config: '/path/to/local/config' }
     * ```
     */
    mounts?: Record<string, string>;
    /**
     * Optional port binding
     * The default port (TCP 80) will be exposed to this host port
     */
    exposePort?: number;
}
/**
 * Start the testing container
 *
 * @param {string|undefined} branch server branch to use (default 'master')
 * @param {boolean|string|undefined} mountApp bind mount app within server (`true` for autodetect, `false` to disable, or a string to force a path) (default true)
 * @param {StartOptions|undefined} options Optional parameters to configre the container creation
 * @return Promise resolving to the IP address of the server
 * @throws {Error} If Nextcloud container could not be started
 */
export declare function startNextcloud(branch?: string, mountApp?: boolean | string, options?: StartOptions): Promise<string>;
/**
 * Configure Nextcloud
 *
 * @param {string[]} apps List of default apps to install (default is ['viewer'])
 * @param {string|undefined} vendoredBranch The branch used for vendored apps, should match server (defaults to latest branch used for `startNextcloud` or fallsback to `master`)
 * @param {Container|undefined} container Optional server container to use (defaults to current container)
 */
export declare const configureNextcloud: (apps?: string[], vendoredBranch?: string, container?: Container) => Promise<void>;
/**
 * Force stop the testing container
 */
export declare const stopNextcloud: () => Promise<void>;
/**
 * Get the testing container's IP
 *
 * @param container name of the container
 */
export declare const getContainerIP: (container?: Container) => Promise<string>;
export declare const waitOnNextcloud: (ip: string) => Promise<void>;
export {};
