/**
 * @copyright 2022 John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @author John Molakvoæ <skjnldsv@protonmail.com>
 * @author Ferdinand Thiessen <opensource@fthiessen.de>
 *
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
export declare class User {
    userId: string;
    password: string;
    language: string;
    constructor(user: string, password?: string, language?: string);
}
export declare const randHash: () => string;
/**
 * Create a random user
 */
export declare const createRandomUser: () => Cypress.Chainable<User>;
/**
 * Create a user
 *
 * **Warning**: Using this function will reset the previous session
 */
export declare const createUser: (user: User) => Cypress.Chainable<Cypress.Response<any>>;
/**
 * Query list of users on the Nextcloud instance
 *
 * **Warning**: Using this function will reset the previous session
 * @returns list of user IDs
 */
export declare function listUsers<b extends boolean>(details?: b): Cypress.Chainable<b extends true ? Record<string, string>[] : string[]>;
/**
 * Delete an user on the Nextcloud instance
 *
 * **Warning**: Using this function will reset the previous session
 * @param user User to delete
 */
export declare const deleteUser: (user: User) => Cypress.Chainable<Cypress.Response<any>>;
/**
 * Modify an attribute of a given user on the Nextcloud instance
 *
 * @param user User who performs the modification
 * @param key Attribute name
 * @param value New attribute value
 */
export declare const modifyUser: (user: User, key: string, value: any) => Cypress.Chainable<Cypress.Response<any>>;
/**
 * Query metadata for and in behalf of a given user
 *
 * @param user User to change
 */
export declare const getUserData: (user: User) => Cypress.Chainable<Cypress.Response<any>>;
/**
 * Enable or disable a user
 *
 * @param {User} user the user to dis- / enable
 * @param {boolean} enable True if the user should be enable, false to disable
 */
export declare const enableUser: (user: User, enable?: boolean) => Cypress.Chainable<Cypress.Response<any>>;
