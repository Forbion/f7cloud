"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listen = exports.getSupportedTypes = void 0;
const capabilities_1 = require("@nextcloud/capabilities");
const axios_1 = __importDefault(require("@nextcloud/axios"));
const event_bus_1 = require("@nextcloud/event-bus");
/**
 * Get the list of supported notification types as reported by the server
 *
 * @return string[]
 */
function getSupportedTypes() {
    const capabilities = (0, capabilities_1.getCapabilities)();
    if (capabilities.notify_push) {
        return capabilities.notify_push.type;
    }
    else {
        return [];
    }
}
exports.getSupportedTypes = getSupportedTypes;
/**
 * Register a listener for notify_push events
 *
 * @param name name of the event
 * @param handler callback invoked for every matching event pushed
 * @param [options]
 * @param [options.credentials] optional credentials used instead of the pre_auth request
 * @param [options.credentials.username] username
 * @param [options.credentials.password] app password
 * @return boolean whether push is set up correctly
 */
function listen(name, handler, options = {}) {
    setupGlobals(options);
    if (!window._notify_push_listeners[name]) {
        window._notify_push_listeners[name] = [];
    }
    window._notify_push_listeners[name].push(handler);
    if (window._notify_push_ws !== null && typeof window._notify_push_ws === "object") {
        window._notify_push_ws.send('listen ' + name);
    }
    else {
        setupSocket(options);
    }
    return window._notify_push_available;
}
exports.listen = listen;
function setupGlobals(options = {}) {
    if (typeof window._notify_push_listeners === "undefined") {
        window._notify_push_listeners = {};
        window._notify_push_ws = null;
        window._notify_push_online = true;
        window._notify_push_available = false;
        window._notify_push_error_count = 0;
        (0, event_bus_1.subscribe)('networkOffline', () => {
            window._notify_push_online = false;
            window._notify_push_ws = null;
        });
        (0, event_bus_1.subscribe)('networkOnline', () => {
            window._notify_push_error_count = 0;
            window._notify_push_online = true;
            setupSocket(options);
        });
    }
}
async function setupSocket(options = {}) {
    if (window._notify_push_ws) {
        return true;
    }
    window._notify_push_ws = true;
    const capabilities = (0, capabilities_1.getCapabilities)();
    if (!capabilities.notify_push) {
        window._notify_push_available = false;
        window._notify_push_ws = null;
        return false;
    }
    window._notify_push_available = true;
    let preAuth;
    if (!options.credentials) {
        const response = await axios_1.default.post(capabilities.notify_push.endpoints.pre_auth);
        preAuth = response.data;
    }
    window._notify_push_ws = new WebSocket(capabilities.notify_push.endpoints.websocket);
    window._notify_push_ws.onopen = () => {
        if (typeof window._notify_push_ws === "object" && window._notify_push_ws) {
            if (preAuth) {
                window._notify_push_ws.send('');
                window._notify_push_ws.send(preAuth);
            }
            else if (options.credentials) {
                window._notify_push_ws.send(options.credentials.username);
                window._notify_push_ws.send(options.credentials.password);
            }
            for (let name in window._notify_push_listeners) {
                window._notify_push_ws.send('listen ' + name);
            }
        }
    };
    window._notify_push_ws.onmessage = message => {
        if (message.data === "authenticated") {
            window._notify_push_error_count = 0;
        }
        else {
            const i = message.data.indexOf(' ');
            let [event, body] = i > 0 ? [message.data.slice(0, i), message.data.slice(i + 1)] : [message.data, null];
            if (body) {
                body = JSON.parse(body);
            }
            if (window._notify_push_listeners[event]) {
                for (let cb of window._notify_push_listeners[event]) {
                    cb(event, body);
                }
            }
        }
    };
    window._notify_push_ws.onerror = window._notify_push_ws.onclose = () => {
        window._notify_push_ws = null;
        window._notify_push_error_count += 1;
        setTimeout(() => {
            if (window._notify_push_online) {
                setupSocket(options);
            }
        }, 1000 * window._notify_push_error_count);
    };
    return true;
}
