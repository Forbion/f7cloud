declare global {
    interface Window {
        _notify_push_listeners: {
            [event: string]: ((string: any, any: any) => void)[];
        };
        _notify_push_ws: WebSocket | null | true;
        _notify_push_online: boolean;
        _notify_push_available: boolean;
        _notify_push_error_count: number;
    }
}
type NotifyPushOptions = {
    credentials?: {
        username: string;
        password: string;
    };
};
/**
 * Get the list of supported notification types as reported by the server
 *
 * @return string[]
 */
export declare function getSupportedTypes(): string[];
/**
 * Register a listener for notify_push events
 *
 * @param name name of the event
 * @param handler callback invoked for every matching event pushed
 * @param [options]
 * @param [options.credentials] optional credentials used instead of the pre_auth request
 * @param [options.credentials.username] username
 * @param [options.credentials.password] app password
 * @return boolean whether push is set up correctly
 */
export declare function listen(name: string, handler: (string: any, any: any) => void, options?: NotifyPushOptions): boolean;
export {};
