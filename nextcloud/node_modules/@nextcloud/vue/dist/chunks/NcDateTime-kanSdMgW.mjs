import { computed, toRef } from "vue";
import { useFormatTime, useFormatRelativeTime } from "../Composables/useFormatDateTime.mjs";
import { n as normalizeComponent } from "./_plugin-vue2_normalizer-DU4iP6Vu.mjs";
const _sfc_main = {
  name: "NcDateTime",
  props: {
    /**
     * The timestamp to display, either an unix timestamp (in milliseconds) or a Date object
     */
    timestamp: {
      type: [Date, Number],
      required: true
    },
    /**
     * The format used for displaying, or if relative time is used the format used for the title (optional)
     *
     * @type {Intl.DateTimeFormatOptions}
     */
    format: {
      type: Object,
      default: () => ({ timeStyle: "medium", dateStyle: "short" })
    },
    /**
     * Wether to display the timestamp as time from now (optional)
     *
     * - `false`: Disable relative time
     * - `'long'`: Long text, like *2 seconds ago* (default)
     * - `'short'`: Short text, like *2 sec. ago*
     * - `'narrow'`: Even shorter text (same as `'short'` on some languages)
     */
    relativeTime: {
      type: [Boolean, String],
      default: "long",
      validator: (v) => v === false || ["long", "short", "narrow"].includes(v)
    },
    /**
     * Ignore seconds when displaying the relative time and just show `a few seconds ago`
     */
    ignoreSeconds: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    const timeOptions = computed(() => ({ format: props.format }));
    const relativeTimeOptions = computed(() => ({
      ignoreSeconds: props.ignoreSeconds,
      relativeTime: props.relativeTime || "long",
      update: props.relativeTime !== false
    }));
    const title = useFormatTime(toRef(props, "timestamp"), timeOptions);
    const relativeTime = useFormatRelativeTime(toRef(props, "timestamp"), relativeTimeOptions);
    const formattedTime = computed(() => props.relativeTime ? relativeTime.value : title.value);
    return {
      formattedTime,
      title
    };
  }
};
var _sfc_render = function render() {
  var _vm = this, _c = _vm._self._c;
  return _c("span", { staticClass: "nc-datetime", attrs: { "data-timestamp": _vm.timestamp, "title": _vm.title }, domProps: { "textContent": _vm._s(_vm.formattedTime) } });
};
var _sfc_staticRenderFns = [];
var __component__ = /* @__PURE__ */ normalizeComponent(
  _sfc_main,
  _sfc_render,
  _sfc_staticRenderFns,
  false,
  null,
  null
);
const NcDateTime = __component__.exports;
export {
  NcDateTime as N
};
//# sourceMappingURL=NcDateTime-kanSdMgW.mjs.map
