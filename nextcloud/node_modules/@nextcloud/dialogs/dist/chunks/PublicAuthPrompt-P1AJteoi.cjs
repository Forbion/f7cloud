"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const vue = require("vue");
const browserStorage = require("@nextcloud/browser-storage");
const auth = require("@nextcloud/auth");
const dialogs = require("@nextcloud/dialogs");
const NcDialog = require("@nextcloud/vue/components/NcDialog");
const NcNoteCard = require("@nextcloud/vue/components/NcNoteCard");
const NcTextField = require("@nextcloud/vue/components/NcTextField");
const _pluginVue2_normalizer = require("./_plugin-vue2_normalizer-MxS9rO0K.cjs");
const files = require("@nextcloud/files");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const NcDialog__default = /* @__PURE__ */ _interopDefault(NcDialog);
const NcNoteCard__default = /* @__PURE__ */ _interopDefault(NcNoteCard);
const NcTextField__default = /* @__PURE__ */ _interopDefault(NcTextField);
/*!
 * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
function getGuestNameValidity(name) {
  if (name.trim() === "") {
    return _pluginVue2_normalizer.t("Names must not be empty.");
  }
  if (name.startsWith(".")) {
    return _pluginVue2_normalizer.t("Names must not start with a dot.");
  }
  try {
    files.validateFilename(name);
    return "";
  } catch (error) {
    if (!(error instanceof files.InvalidFilenameError)) {
      throw error;
    }
    switch (error.reason) {
      case files.InvalidFilenameErrorReason.Character:
        return _pluginVue2_normalizer.t('"{char}" is not allowed inside a name.', { char: error.segment });
      case files.InvalidFilenameErrorReason.ReservedName:
        return _pluginVue2_normalizer.t('"{segment}" is a reserved name and not allowed.', { segment: error.segment });
      case files.InvalidFilenameErrorReason.Extension:
        if (error.segment.match(/\.[a-z]/i)) {
          return _pluginVue2_normalizer.t('"{extension}" is not an allowed name.', { extension: error.segment });
        }
        return _pluginVue2_normalizer.t('Names must not end with "{extension}".', { extension: error.segment });
      default:
        return _pluginVue2_normalizer.t("Invalid name.");
    }
  }
}
const storage = browserStorage.getBuilder("public").build();
const _sfc_main = vue.defineComponent({
  name: "PublicAuthPrompt",
  components: {
    NcDialog: NcDialog__default.default,
    NcNoteCard: NcNoteCard__default.default,
    NcTextField: NcTextField__default.default
  },
  props: {
    /**
     * Preselected nickname
     * @default '' No name preselected by default
     */
    nickname: {
      type: String,
      default: ""
    },
    /**
     * Dialog title
     */
    title: {
      type: String,
      default: _pluginVue2_normalizer.t("Guest identification")
    },
    /**
     * Dialog text under the dialog title
     * e.g 'Enter your name to access the file'
     * @default '' Not shown by default
     */
    text: {
      type: String,
      default: ""
    },
    /**
     * Dialog notice
     * @default 'You are currently not identified.'
     */
    notice: {
      type: String,
      default: _pluginVue2_normalizer.t("You are currently not identified.")
    },
    /**
     * Dialog submit button label
     * @default 'Submit name'
     */
    submitLabel: {
      type: String,
      default: _pluginVue2_normalizer.t("Submit name")
    },
    /**
     * Whether the dialog is cancellable
     * @default false
     */
    cancellable: {
      type: Boolean,
      default: false
    }
  },
  setup() {
    return {
      t: _pluginVue2_normalizer.t
    };
  },
  emits: ["close"],
  data() {
    return {
      name: ""
    };
  },
  computed: {
    dialogButtons() {
      const cancelButton = {
        label: _pluginVue2_normalizer.t("Cancel"),
        variant: "tertiary",
        callback: () => this.$emit("close")
      };
      const submitButton = {
        label: this.submitLabel,
        type: "submit",
        variant: "primary"
      };
      if (this.cancellable) {
        return [cancelButton, submitButton];
      }
      return [submitButton];
    }
  },
  watch: {
    /** Reset name to pre-selected nickname (e.g. Talk / Collabora ) */
    nickname: {
      handler() {
        this.name = this.nickname;
      },
      immediate: true
    },
    name() {
      const newName = this.name.trim?.() || "";
      const input = this.$refs.input?.$el.querySelector("input");
      if (!input) {
        return;
      }
      const validity = getGuestNameValidity(newName);
      input.setCustomValidity(validity);
      input.reportValidity();
    }
  },
  methods: {
    onSubmit() {
      const input = this.$refs.input;
      const nickname = this.name.trim();
      if (nickname === "") {
        input.setCustomValidity(_pluginVue2_normalizer.t("You cannot leave the name empty."));
        input.reportValidity();
        input.focus();
        return;
      }
      if (nickname.length < 2) {
        input.setCustomValidity(_pluginVue2_normalizer.t("Please enter a name with at least 2 characters."));
        input.reportValidity();
        input.focus();
        return;
      }
      try {
        auth.setGuestNickname(nickname);
      } catch (e) {
        dialogs.showError(_pluginVue2_normalizer.t("Failed to set nickname."));
        console.error("Failed to set nickname", e);
        input.focus();
        return;
      }
      storage.setItem("public-auth-prompt-shown", "true");
      this.$emit("close", this.name);
    }
  }
});
var _sfc_render = function render() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("NcDialog", { staticClass: "public-auth-prompt", attrs: { "buttons": _vm.dialogButtons, "data-cy-public-auth-prompt-dialog": "", "is-form": "", "no-close": "", "name": _vm.title }, on: { "submit": _vm.onSubmit } }, [_vm.text ? _c("p", { staticClass: "public-auth-prompt__text" }, [_vm._v(" " + _vm._s(_vm.text) + " ")]) : _vm._e(), _c("NcNoteCard", { staticClass: "public-auth-prompt__header", attrs: { "text": _vm.notice, "type": "info" } }), _c("NcTextField", { ref: "input", staticClass: "public-auth-prompt__input", attrs: { "data-cy-public-auth-prompt-dialog-name": "", "label": _vm.t("Name"), "placeholder": _vm.t("Enter your name"), "required": !_vm.cancellable, "minlength": "2", "name": "name" }, model: { value: _vm.name, callback: function($$v) {
    _vm.name = $$v;
  }, expression: "name" } })], 1);
};
var _sfc_staticRenderFns = [];
var __component__ = /* @__PURE__ */ _pluginVue2_normalizer.normalizeComponent(
  _sfc_main,
  _sfc_render,
  _sfc_staticRenderFns,
  false,
  null,
  "143ac1fb"
);
const PublicAuthPrompt = __component__.exports;
exports.default = PublicAuthPrompt;
//# sourceMappingURL=PublicAuthPrompt-P1AJteoi.cjs.map
